{
  "$schema": "https://raw.githubusercontent.com/oasis-tcs/sarif-spec/master/Schemata/sarif-schema-2.1.0.json",
  "version": "2.1.0",
  "runs": [
    {
      "tool": {
        "driver": {
          "name": "SnykCode",
          "semanticVersion": "1.0.0",
          "version": "1.0.0",
          "rules": [
            {
              "id": "python/InsecureXmlParser",
              "name": "InsecureXmlParser",
              "shortDescription": {
                "text": "InsecureXmlParser"
              },
              "defaultConfiguration": {
                "level": "warning"
              },
              "help": {
                "markdown": "",
                "text": ""
              },
              "properties": {
                "tags": [
                  "python"
                ],
                "categories": [
                  "Security"
                ],
                "exampleCommitFixes": [
                  {
                    "commitURL": "https://github.com/AcutronicRobotics/HRIM/commit/250c0c6fbccf7d1584927c2e7dd3761ae1c97012?diff=split#diff-c98fee250d6c0852708b3e48b7c79662L21",
                    "lines": [
                      {
                        "line": "                     choices=component_type_array)",
                        "lineNumber": 18,
                        "lineChange": "none"
                      },
                      {
                        "line": "args = parser.parse_args()",
                        "lineNumber": 19,
                        "lineChange": "none"
                      },
                      {
                        "line": "tree = et.parse(args.filename)",
                        "lineNumber": 20,
                        "lineChange": "removed"
                      },
                      {
                        "line": "tree = parse(args.filename)",
                        "lineNumber": 20,
                        "lineChange": "added"
                      },
                      {
                        "line": "root = tree.getroot()",
                        "lineNumber": 21,
                        "lineChange": "none"
                      }
                    ]
                  },
                  {
                    "commitURL": "https://github.com/moloch--/RootTheBox/commit/49d8f3f218c10aa71697fab2aab7d4eebbbc2618?diff=split#diff-f03054770abb9c24ad726a4465460150L124",
                    "lines": [
                      {
                        "line": "try:",
                        "lineNumber": 124,
                        "lineChange": "none"
                      },
                      {
                        "line": "    tree = ET.parse(filename)",
                        "lineNumber": 125,
                        "lineChange": "none"
                      },
                      {
                        "line": "except Exception as error:",
                        "lineNumber": 124,
                        "lineChange": "removed"
                      },
                      {
                        "line": "    print(WARN+\"ERROR: \" + str(error))",
                        "lineNumber": 125,
                        "lineChange": "removed"
                      },
                      {
                        "line": "    xml_root = tree.getroot()",
                        "lineNumber": 126,
                        "lineChange": "added"
                      },
                      {
                        "line": "    levels = get_child_by_tag(xml_root, \"gamelevels\")",
                        "lineNumber": 127,
                        "lineChange": "added"
                      }
                    ]
                  },
                  {
                    "commitURL": "https://github.com/eucalyptus/eucaconsole/commit/62b8abc0b08531e1145d48f6951ebc7bd6afc735?diff=split#diff-c8dbccf4ef1ce28db5c8808ff9d73422L293",
                    "lines": [
                      {
                        "line": "    creds = Credentials()",
                        "lineNumber": 291,
                        "lineChange": "none"
                      },
                      {
                        "line": "    h = BotoXmlHandler(creds, None)",
                        "lineNumber": 292,
                        "lineChange": "none"
                      },
                      {
                        "line": "    xml.sax.parseString(body, h)",
                        "lineNumber": 292,
                        "lineChange": "removed"
                      },
                      {
                        "line": "    parseString(body, h)",
                        "lineNumber": 293,
                        "lineChange": "added"
                      },
                      {
                        "line": "    return creds",
                        "lineNumber": 294,
                        "lineChange": "none"
                      },
                      {
                        "line": "except SSLError as err:",
                        "lineNumber": 295,
                        "lineChange": "none"
                      }
                    ]
                  }
                ],
                "exampleCommitDescriptions": [
                  "Use defusedxml in server code ()",
                  "using defusedxml ElementTree for safer parsing of untrusted XML data ()"
                ],
                "precision": "very-high",
                "repoDatasetSize": 32
              }
            },
            {
              "id": "python/SSRF",
              "name": "SSRF",
              "shortDescription": {
                "text": "SSRF"
              },
              "defaultConfiguration": {
                "level": "warning"
              },
              "help": {
                "markdown": "",
                "text": ""
              },
              "properties": {
                "tags": [
                  "python"
                ],
                "categories": [
                  "Security"
                ],
                "exampleCommitFixes": [
                  {
                    "commitURL": "https://github.com/Ahirice/sato/commit/d4bdc498c768f83cbe97452d5f7fe90ad13b7c6f?diff=split#diff-d355af669766ee3562643e8e5034f715L14",
                    "lines": [
                      {
                        "line": "def index():",
                        "lineNumber": 11,
                        "lineChange": "none"
                      },
                      {
                        "line": "  print(port)",
                        "lineNumber": 12,
                        "lineChange": "none"
                      },
                      {
                        "line": "  data = json.loads(request.get_data())",
                        "lineNumber": 13,
                        "lineChange": "none"
                      },
                      {
                        "line": "  # FETCH THE CRYPTO NAME",
                        "lineNumber": 15,
                        "lineChange": "none"
                      },
                      {
                        "line": "  crypto_name = data['conversation']['memory']['crypto']['value']",
                        "lineNumber": 16,
                        "lineChange": "removed"
                      },
                      {
                        "line": "  crypto_name = daata['conversation']['memory']['crypto']['value']",
                        "lineNumber": 16,
                        "lineChange": "added"
                      },
                      {
                        "line": "  # FETCH BTC/USD/EUR PRICES",
                        "lineNumber": 18,
                        "lineChange": "none"
                      },
                      {
                        "line": "  r = requests.get(\"https://min-api.cryptocompare.com/data/price?fsym=\"+crypto_name+\"&tsyms=BTC,USD,EUR\")",
                        "lineNumber": 19,
                        "lineChange": "none"
                      },
                      {
                        "line": "  return jsonify(",
                        "lineNumber": 21,
                        "lineChange": "none"
                      }
                    ]
                  },
                  {
                    "commitURL": "https://github.com/carpentries/amy/commit/565c9e736d470fb0bdfd501edfc3cff0516a1086?diff=split#diff-ff40cc33cf5228ac8b825f8d4f9ef9b8L711",
                    "lines": [
                      {
                        "line": "@login_required",
                        "lineNumber": 709,
                        "lineChange": "none"
                      },
                      {
                        "line": "def validate_event(request, event_ident):",
                        "lineNumber": 710,
                        "lineChange": "none"
                      },
                      {
                        "line": "    '''Check the event's home page *or* the specified URL (for testing).'''",
                        "lineNumber": 711,
                        "lineChange": "none"
                      },
                      {
                        "line": "    page_url, error_messages = None, []",
                        "lineNumber": 712,
                        "lineChange": "none"
                      },
                      {
                        "line": "    event = Event.get_by_ident(event_ident)",
                        "lineNumber": 713,
                        "lineChange": "none"
                      },
                      {
                        "line": "    github_url = request.GET.get('url', None)  # for manual override",
                        "lineNumber": 714,
                        "lineChange": "none"
                      },
                      {
                        "line": "    if github_url is None:",
                        "lineNumber": 715,
                        "lineChange": "none"
                      },
                      {
                        "line": "        github_url = event.url",
                        "lineNumber": 716,
                        "lineChange": "none"
                      },
                      {
                        "line": "    try:",
                        "lineNumber": 718,
                        "lineChange": "none"
                      },
                      {
                        "line": "        page_url = normalize_event_index_url(github_url)",
                        "lineNumber": 719,
                        "lineChange": "removed"
                      },
                      {
                        "line": "        page_url, _ = normalize_event_index_url(github_url)",
                        "lineNumber": 719,
                        "lineChange": "added"
                      },
                      {
                        "line": "        response = requests.get(page_url)",
                        "lineNumber": 720,
                        "lineChange": "none"
                      },
                      {
                        "line": "        if response.status_code != 200:",
                        "lineNumber": 722,
                        "lineChange": "none"
                      }
                    ]
                  },
                  {
                    "commitURL": "https://github.com/amaya382/k8s-debugkit/commit/60ffff5a228e55ce31d0c849f11139f635f04a3c?diff=split#diff-cc3621ca55dcd6d6a301c2bfcf11c24cL248",
                    "lines": [
                      {
                        "line": "@app.route(\"/exec/get/<path:dst>\")",
                        "lineNumber": 247,
                        "lineChange": "removed"
                      },
                      {
                        "line": "def get(dst=None):",
                        "lineNumber": 248,
                        "lineChange": "removed"
                      },
                      {
                        "line": "@api.route(\"/exec/get/{dst}\")",
                        "lineNumber": 250,
                        "lineChange": "added"
                      },
                      {
                        "line": "def get(req, res, *, dst):",
                        "lineNumber": 251,
                        "lineChange": "added"
                      },
                      {
                        "line": "    \"\"\"",
                        "lineNumber": 252,
                        "lineChange": "none"
                      },
                      {
                        "line": "    Exec a http get request to dst",
                        "lineNumber": 253,
                        "lineChange": "none"
                      },
                      {
                        "line": "    \"\"\"",
                        "lineNumber": 254,
                        "lineChange": "none"
                      },
                      {
                        "line": "    res = requests.get(dst, timeout=(2, 2))",
                        "lineNumber": 252,
                        "lineChange": "removed"
                      },
                      {
                        "line": "    return jsonify({",
                        "lineNumber": 253,
                        "lineChange": "removed"
                      },
                      {
                        "line": "    result = requests.get(dst, timeout=(2, 2))",
                        "lineNumber": 255,
                        "lineChange": "added"
                      },
                      {
                        "line": "    res.media = {",
                        "lineNumber": 256,
                        "lineChange": "added"
                      },
                      {
                        "line": "        \"hostname\": __hostname(),",
                        "lineNumber": 257,
                        "lineChange": "none"
                      },
                      {
                        "line": "        \"statusCode\": res.status_code,",
                        "lineNumber": 255,
                        "lineChange": "removed"
                      },
                      {
                        "line": "        \"statusCode\": result.status_code,",
                        "lineNumber": 258,
                        "lineChange": "added"
                      }
                    ]
                  }
                ],
                "exampleCommitDescriptions": [
                  "Adding summary API request",
                  "Edited a route to take in one issue at a time for Github requesting"
                ],
                "precision": "very-high",
                "repoDatasetSize": 120
              }
            },
            {
              "id": "python/DisablesCSRFProtection",
              "name": "DisablesCSRFProtection",
              "shortDescription": {
                "text": "Cross-Site Request Forgery (CSRF)"
              },
              "defaultConfiguration": {
                "level": "warning"
              },
              "help": {
                "markdown": "\n## Details\nCross-site request forgery is an attack in which a malicious third party takes advantage of a user's authenticated credentials (such as a browser cookie) to impersonate that trusted user and perform unauthorized actions. The web application server cannot tell the difference between legitimate and malicious requests. This type of attack generally begins by tricking the user with a social engineering attack, such as a link or popup that the user inadvertently clicks, causing an unauthorized request to be sent to the web server. Consequences vary: At a standard user level, attackers can change passwords, transfer funds, make purchases, or connect with contacts; from an administrator account, attackers can then make changes to or even take down the app itself.\n\n### Best practices for prevention\n* Use development frameworks that defend against CSRF, using a nonce, hash, or some other security device to the URL and/or to forms.\n* Implement secure, unique, hidden tokens that are checked by the server each time to validate state-change requests.\n* Never assume that authentication tokens and session identifiers mean a request is legitimate.\n* Understand and implement other safe-cookie techniques, such as double submit cookies.\n* Terminate user sessions when not in use, including automatic timeout.\n* Ensure rigorous coding practices and defenses against other commonly exploited CWEs, since cross-site scripting (XSS), for example, can be used to bypass defenses against CSRF.",
                "text": ""
              },
              "properties": {
                "tags": [
                  "python"
                ],
                "categories": [
                  "Security"
                ],
                "exampleCommitFixes": [
                  {
                    "commitURL": "https://github.com/MicroPyramid/micro-finance/commit/f943aa330da6046cc2db6b707c45cb68f896ac2a?diff=split#diff-8ad776d624bd3ad409fe0725de5fe48dL41",
                    "lines": [
                      {
                        "line": " ",
                        "lineNumber": 39,
                        "lineChange": "none"
                      },
                      {
                        "line": " ",
                        "lineNumber": 40,
                        "lineChange": "none"
                      },
                      {
                        "line": "@csrf_exempt",
                        "lineNumber": 40,
                        "lineChange": "removed"
                      },
                      {
                        "line": "def create_branch(request):",
                        "lineNumber": 48,
                        "lineChange": "none"
                      },
                      {
                        "line": "    if request.method == 'GET':",
                        "lineNumber": 49,
                        "lineChange": "none"
                      },
                      {
                        "line": "         data = {}",
                        "lineNumber": 50,
                        "lineChange": "none"
                      }
                    ]
                  },
                  {
                    "commitURL": "https://github.com/rtzll/django-todolist/commit/2c21f69e305cd940d31b09df3e8a4285ebf089fd?diff=split#diff-265524153427c5c3f0dd9ae087f16a4bL27",
                    "lines": [
                      {
                        "line": "@csrf_exempt",
                        "lineNumber": 26,
                        "lineChange": "removed"
                      },
                      {
                        "line": "@api_view(['GET', 'POST'])",
                        "lineNumber": 17,
                        "lineChange": "added"
                      },
                      {
                        "line": "def todolists(request):",
                        "lineNumber": 27,
                        "lineChange": "none"
                      },
                      {
                        "line": "    \"\"\"List all todolists, or create a new todolist.\"\"\"",
                        "lineNumber": 28,
                        "lineChange": "none"
                      },
                      {
                        "line": "if request.method == 'GET':",
                        "lineNumber": 29,
                        "lineChange": "none"
                      }
                    ]
                  },
                  {
                    "commitURL": "https://github.com/bmbouter/Opus/commit/2338303855ec48ec6f8ea828aa56b11b23f2b432?diff=split#diff-d8e7d3e2a98f4969cfc7b45e265ea0c8L364",
                    "lines": [
                      {
                        "line": "            ), request)",
                        "lineNumber": 361,
                        "lineChange": "none"
                      },
                      {
                        "line": "@csrf_exempt",
                        "lineNumber": 363,
                        "lineChange": "removed"
                      },
                      {
                        "line": "@debug_view",
                        "lineNumber": 361,
                        "lineChange": "added"
                      },
                      {
                        "line": "@login_required",
                        "lineNumber": 364,
                        "lineChange": "none"
                      },
                      {
                        "line": "@get_project_object",
                        "lineNumber": 365,
                        "lineChange": "none"
                      }
                    ]
                  }
                ],
                "exampleCommitDescriptions": [
                  "Update js to support csrf token",
                  "We're going to be using this from other views, so make it more generic.",
                  "Added try/except for csrf_exempt for older Django installs."
                ],
                "precision": "very-high",
                "repoDatasetSize": 84,
                "cwe": [
                  "CWE-352"
                ]
              }
            },
            {
              "id": "javascript/DOMXSS",
              "name": "DOMXSS",
              "shortDescription": {
                "text": "Cross-site Scripting (XSS)"
              },
              "defaultConfiguration": {
                "level": "error"
              },
              "help": {
                "markdown": "## Details\n\nA cross-site scripting attack occurs when the attacker tricks a legitimate web-based application or site to accept a request as originating from a trusted source.\n\nThis is done by escaping the context of the web application; the web application then delivers that data to its users along with other trusted dynamic content, without validating it. The browser unknowingly executes malicious script on the client side (through client-side languages; usually JavaScript or HTML)  in order to perform actions that are otherwise typically blocked by the browser's Same Origin Policy.\n\nInjecting malicious code is the most prevalent manner by which XSS is exploited; for this reason, escaping characters in order to prevent this manipulation is the top method for securing code against this vulnerability.\n\nEscaping means that the application is coded to mark key characters, and particularly key characters included in user input, to prevent those characters from being interpreted in a dangerous context. For example, in HTML, `<` can be coded as  `&lt`; and `>` can be coded as `&gt`; in order to be interpreted and displayed as themselves in text, while within the code itself, they are used for HTML tags. If malicious content is injected into an application that escapes special characters and that malicious content uses `<` and `>` as HTML tags, those characters are nonetheless not interpreted as HTML tags by the browser if they've been correctly escaped in the application code and in this way the attempted attack is diverted.\n\nThe most prominent use of XSS is to steal cookies (source: OWASP HttpOnly) and hijack user sessions, but XSS exploits have been used to expose sensitive information, enable access to privileged services and functionality and deliver malware.\n\n### Types of attacks\nThere are a few methods by which XSS can be manipulated:\n\n|Type|Origin|Description|\n|--|--|--|\n|**Stored**|Server|The malicious code is inserted in the application (usually as a link) by the attacker. The code is activated every time a user clicks the link.|\n|**Reflected**|Server|The attacker delivers a malicious link externally from the vulnerable web site application to a user. When clicked, malicious code is sent to the vulnerable web site, which reflects the attack back to the user's browser.|\n|**DOM-based**|Client|The attacker forces the user's browser to render a malicious page. The data in the page itself delivers the cross-site scripting data.|\n|**Mutated**| |The attacker injects code that appears safe, but is then rewritten and modified by the browser, while parsing the markup. An example is rebalancing unclosed quotation marks or even adding quotation marks to unquoted parameters.|\n\n### Affected environments\nThe following environments are susceptible to an XSS attack:\n\n* Web servers\n* Application servers\n* Web application environments\n\n### How to prevent\nThis section describes the top best practices designed to specifically protect your code:\n\n* Sanitize data input in an HTTP request before reflecting it back, ensuring all data is validated, filtered or escaped before echoing anything back to the user, such as the values of query parameters during searches.\n* Convert special characters such as `?`, `&`, `/`, `<`, `>` and spaces to their respective HTML or URL encoded equivalents.\n* Give users the option to disable client-side scripts.\n* Redirect invalid requests.\n* Detect simultaneous logins, including those from two separate IP addresses, and invalidate those sessions.\n* Use and enforce a Content Security Policy (source: Wikipedia) to disable any features that might be manipulated for an XSS attack.\n* Read the documentation for any of the libraries referenced in your code to understand which elements allow for embedded HTML.",
                "text": ""
              },
              "properties": {
                "tags": [
                  "javascript"
                ],
                "categories": [
                  "Security"
                ],
                "exampleCommitFixes": [
                  {
                    "commitURL": "https://github.com/decred/dcrdata/commit/1996f027d9c1b64fafdc22baa26b58d27f374638?diff=split#diff-6d548c58846af1c8dadd7f36d75f2795L319",
                    "lines": [
                      {
                        "line": "var ctrl = this",
                        "lineNumber": 316,
                        "lineChange": "none"
                      },
                      {
                        "line": "ctrl.listboxTarget.classList.add('loading')",
                        "lineNumber": 317,
                        "lineChange": "none"
                      },
                      {
                        "line": "let tableResponse = await axios.get(ctrl.makeTableUrl(txType, count, offset))",
                        "lineNumber": 318,
                        "lineChange": "none"
                      },
                      {
                        "line": "let html = tableResponse.data",
                        "lineNumber": 319,
                        "lineChange": "none"
                      },
                      {
                        "line": "ctrl.tableTarget.innerHTML = html",
                        "lineNumber": 320,
                        "lineChange": "removed"
                      },
                      {
                        "line": "ctrl.tableTarget.innerHTML = dompurify.sanitize(html)",
                        "lineNumber": 301,
                        "lineChange": "added"
                      },
                      {
                        "line": "var settings = ctrl.listSettings",
                        "lineNumber": 321,
                        "lineChange": "none"
                      },
                      {
                        "line": "settings.n = count",
                        "lineNumber": 322,
                        "lineChange": "none"
                      }
                    ]
                  },
                  {
                    "commitURL": "https://github.com/shokai/sinatra-template/commit/d4b6b31eea77cd39d387f515ced18f73b508854f?diff=split#diff-f485b1889bd3c96211c9236b0cf5daecL2",
                    "lines": [
                      {
                        "line": "};",
                        "lineNumber": 7,
                        "lineChange": "added"
                      },
                      {
                        "line": "$(function(){",
                        "lineNumber": 9,
                        "lineChange": "none"
                      },
                      {
                        "line": "    $('input#start_btn').click(omikuji_start);",
                        "lineNumber": 10,
                        "lineChange": "none"
                      },
                      {
                        "line": "});",
                        "lineNumber": 11,
                        "lineChange": "none"
                      },
                      {
                        "line": "var omikuji_start = function(){",
                        "lineNumber": 13,
                        "lineChange": "none"
                      },
                      {
                        "line": "    $.getJSON(omikuji_api, function(res){",
                        "lineNumber": 14,
                        "lineChange": "none"
                      },
                      {
                        "line": "        console.log(res);",
                        "lineNumber": 15,
                        "lineChange": "none"
                      },
                      {
                        "line": "        var li = $('<li>').append(res.result + ' - ' + res.time);",
                        "lineNumber": 8,
                        "lineChange": "removed"
                      },
                      {
                        "line": "        var li = $('<li>').append(res.result.htmlEscape() + ' - ' + res.time.htmlEscape());",
                        "lineNumber": 16,
                        "lineChange": "added"
                      },
                      {
                        "line": "        $('ul#results').prepend(li);",
                        "lineNumber": 17,
                        "lineChange": "none"
                      },
                      {
                        "line": "    });",
                        "lineNumber": 18,
                        "lineChange": "none"
                      }
                    ]
                  },
                  {
                    "commitURL": "https://github.com/ether/etherpad-lite/commit/83ce73b77b5061de2c1c24219b7bdc3ea499f7af?diff=split#diff-5800366247a45833e8dbfce86ea4d046L59",
                    "lines": [
                      {
                        "line": "//Check if we accessed the pad over https",
                        "lineNumber": 57,
                        "lineChange": "none"
                      },
                      {
                        "line": "var secure = window.location.protocol == \"https:\" ? \";secure\" : \"\";",
                        "lineNumber": 58,
                        "lineChange": "none"
                      },
                      {
                        "line": "//Check if the browser is IE and if so make sure the full path is set in the cookie",
                        "lineNumber": 60,
                        "lineChange": "none"
                      },
                      {
                        "line": "  $(\"#editorloadingbox\").css(\"padding\", \"10px\");",
                        "lineNumber": 524,
                        "lineChange": "none"
                      },
                      {
                        "line": "  $(\"#editorloadingbox\").css(\"padding-top\", \"45px\");",
                        "lineNumber": 525,
                        "lineChange": "none"
                      },
                      {
                        "line": "  $(\"#editorloadingbox\").html(\"<div style='text-align:left;color:red;font-size:16px;'><b>An error occurred</b><br>The error was reported with the following id: '\" + errorId + \"'<br><br><span sty",
                        "lineNumber": 526,
                        "lineChange": "none"
                      },
                      {
                        "line": "    + \"ErrorId: \" + errorId + \"<br>URL: \" + window.location.href + \"<br>UserAgent: \" + userAgent + \"<br>\" + msg + \" in \" + url + \" at line \" + linenumber + \"'</div></div>\");",
                        "lineNumber": 527,
                        "lineChange": "removed"
                      },
                      {
                        "line": "    + \"ErrorId: \" + errorId + \"<br>URL: \" + padutils.escapeHtml(window.location.href) + \"<br>UserAgent: \" + userAgent + \"<br>\" + msg + \" in \" + url + \" at line \" + linenumber + \"'</div></div>\");",
                        "lineNumber": 527,
                        "lineChange": "added"
                      },
                      {
                        "line": "}",
                        "lineNumber": 528,
                        "lineChange": "none"
                      }
                    ]
                  }
                ],
                "exampleCommitDescriptions": [
                  "Add unit test.",
                  "e3db0cd CHANGES.md\n84d1acf Add tests.",
                  "Update and clean up the tests by using the iframe's load event."
                ],
                "precision": "very-high",
                "repoDatasetSize": 1482,
                "cwe": [
                  "CWE-79"
                ]
              }
            },
            {
              "id": "python/insecureHash",
              "name": "insecureHash",
              "shortDescription": {
                "text": "insecureHash"
              },
              "defaultConfiguration": {
                "level": "warning"
              },
              "help": {
                "markdown": "",
                "text": ""
              },
              "properties": {
                "tags": [
                  "python"
                ],
                "categories": [
                  "Security"
                ],
                "exampleCommitFixes": [
                  {
                    "commitURL": "https://github.com/OpenBazaar/OpenBazaar-Server/commit/d8f16617bf056518b23a52829b9fbf7dfc7e65e8?diff=split#diff-01fcf60606d8ac2d3fafcc94d68c4fbbL16",
                    "lines": [
                      {
                        "line": "if not isinstance(s, str):",
                        "lineNumber": 13,
                        "lineChange": "none"
                      },
                      {
                        "line": "    s = str(s)",
                        "lineNumber": 14,
                        "lineChange": "none"
                      },
                      {
                        "line": "return hashlib.sha1(s).digest()",
                        "lineNumber": 15,
                        "lineChange": "removed"
                      },
                      {
                        "line": "intermed = hashlib.sha256(s).digest()",
                        "lineNumber": 15,
                        "lineChange": "added"
                      },
                      {
                        "line": "digest = hashlib.new('ripemd160', intermed).digest()",
                        "lineNumber": 16,
                        "lineChange": "added"
                      },
                      {
                        "line": "return digest",
                        "lineNumber": 17,
                        "lineChange": "added"
                      }
                    ]
                  },
                  {
                    "commitURL": "https://github.com/borgbackup/borg/commit/98b1b5e0ce79415b07adc5c184d09032548c04b5?diff=split#diff-bfc38368f3152da34c3f8df745363872L74",
                    "lines": [
                      {
                        "line": "def add_chunk(self, data):",
                        "lineNumber": 72,
                        "lineChange": "none"
                      },
                      {
                        "line": "   osize = len(data)",
                        "lineNumber": 71,
                        "lineChange": "removed"
                      },
                      {
                        "line": "   data = zlib.compress(data)",
                        "lineNumber": 72,
                        "lineChange": "removed"
                      },
                      {
                        "line": "   id = hashlib.sha1(data).digest()",
                        "lineNumber": 73,
                        "lineChange": "removed"
                      },
                      {
                        "line": "   id = hashlib.sha256(data).digest()",
                        "lineNumber": 73,
                        "lineChange": "added"
                      },
                      {
                        "line": "   if self.seen_chunk(id):",
                        "lineNumber": 74,
                        "lineChange": "none"
                      },
                      {
                        "line": "       return self.chunk_incref(id)",
                        "lineNumber": 75,
                        "lineChange": "none"
                      }
                    ]
                  },
                  {
                    "commitURL": "https://github.com/libp2p/py-libp2p/commit/794d2101e9b5ce4d1efd3d94b8dacfa508145382?diff=split#diff-1d890a1077fe573ec97cd75191926eddL96",
                    "lines": [
                      {
                        "line": "if isinstance(data, str):",
                        "lineNumber": 93,
                        "lineChange": "none"
                      },
                      {
                        "line": "    data = data.encode(\"utf8\")",
                        "lineNumber": 94,
                        "lineChange": "none"
                      },
                      {
                        "line": "return hashlib.sha1(data).digest()",
                        "lineNumber": 95,
                        "lineChange": "removed"
                      },
                      {
                        "line": "return hashlib.sha256(data).digest()",
                        "lineNumber": 95,
                        "lineChange": "added"
                      }
                    ]
                  }
                ],
                "exampleCommitDescriptions": [
                  "- Fix upload test on systems that blocks MD5",
                  "* Adding tests for hashing with xxhash.",
                  "Log SHA256 of files instead of MD5"
                ],
                "precision": "very-high",
                "repoDatasetSize": 354
              }
            },
            {
              "id": "python/Deserialization",
              "name": "Deserialization",
              "shortDescription": {
                "text": "Deserialization of Untrusted Data"
              },
              "defaultConfiguration": {
                "level": "error"
              },
              "help": {
                "markdown": "## Details\n\nSerialization is a process of converting an object into a sequence of bytes which can be persisted to a disk or database or can be sent through streams. The reverse process of creating object from sequence of bytes is called deserialization. Serialization is commonly used for communication (sharing objects between multiple hosts) and persistence (store the object state in a file or a database). It is an integral part of popular protocols like _Remote Method Invocation (RMI)_, _Java Management Extension (JMX)_, _Java Messaging System (JMS)_, _Action Message Format (AMF)_, _Java Server Faces (JSF) ViewState_, etc.\n\n_Deserialization of untrusted data_ ([CWE-502](https://cwe.mitre.org/data/definitions/502.html)), is when the application deserializes untrusted data without sufficiently verifying that the resulting data will be valid, letting the attacker to control the state or the flow of the execution.\n\nJava deserialization issues have been known for years. However, interest in the issue intensified greatly in 2015, when classes that could be abused to achieve remote code execution were found in a [popular library (Apache Commons Collection)](https://snyk.io/vuln/SNYK-JAVA-COMMONSCOLLECTIONS-30078). These classes were used in zero-days affecting IBM WebSphere, Oracle WebLogic and many other products.\n\n\nAn attacker just needs to identify a piece of software that has both a vulnerable class on its path, and performs deserialization on untrusted data. Then all they need to do is send the payload into the deserializer, getting the command executed.\n\n\n> Developers put too much trust in Java Object Serialization. Some even de-serialize objects pre-authentication. When deserializing an Object in Java you typically cast it to an expected type, and therefore Java's strict type system will ensure you only get valid object trees. Unfortunately, by the time the type checking happens, platform code has already created and executed significant logic. So, before the final type is checked a lot of code is executed from the readObject() methods of various objects, all of which is out of the developer's control. By combining the readObject() methods of various classes which are available on the classpath of the vulnerable application an attacker can execute functions (including calling Runtime.exec() to execute local OS commands).",
                "text": ""
              },
              "properties": {
                "tags": [
                  "python"
                ],
                "categories": [
                  "Security"
                ],
                "exampleCommitFixes": [
                  {
                    "commitURL": "https://github.com/Maximus5/ConEmu/commit/7c972aa5f5213a4747d42e90e4910bbfb2dab39a?diff=split#diff-30b7b45f353ab9a3e5d142c3c82210e7L291",
                    "lines": [
                      {
                        "line": "def pull(self, lang_id):",
                        "lineNumber": 300,
                        "lineChange": "none"
                      },
                      {
                        "line": "    print('Pulling language {} from Transifex'.format(lang_id))",
                        "lineNumber": 301,
                        "lineChange": "none"
                      },
                      {
                        "line": "    result = requests.get(",
                        "lineNumber": 302,
                        "lineChange": "none"
                      },
                      {
                        "line": "        '{}/translation/{}/?{}'.format(",
                        "lineNumber": 303,
                        "lineChange": "none"
                      },
                      {
                        "line": "            self.base_url, lang_id, self.file_format),",
                        "lineNumber": 304,
                        "lineChange": "none"
                      },
                      {
                        "line": "# print(result.encoding)",
                        "lineNumber": 308,
                        "lineChange": "none"
                      },
                      {
                        "line": "result.encoding = 'utf-8'",
                        "lineNumber": 309,
                        "lineChange": "none"
                      },
                      {
                        "line": "data = yaml.load(result.text)",
                        "lineNumber": 298,
                        "lineChange": "removed"
                      },
                      {
                        "line": "data = yaml.load(result.text, Loader=yaml.SafeLoader)",
                        "lineNumber": 310,
                        "lineChange": "added"
                      },
                      {
                        "line": "# pp = pprint.PrettyPrinter(indent=2)",
                        "lineNumber": 311,
                        "lineChange": "none"
                      },
                      {
                        "line": "# pp.pprint(data)",
                        "lineNumber": 312,
                        "lineChange": "none"
                      }
                    ]
                  },
                  {
                    "commitURL": "https://github.com/instrumenta/openapi2jsonschema/commit/ed24ff4e3fc5c838490525d56048db3cee90329f?diff=split#diff-453148a7ebe7bb6a47c6d09567ec9befL151",
                    "lines": [
                      {
                        "line": "if sys.version_info < (3, 0):",
                        "lineNumber": 148,
                        "lineChange": "none"
                      },
                      {
                        "line": "    response = urllib.urlopen(schema)",
                        "lineNumber": 150,
                        "lineChange": "none"
                      },
                      {
                        "line": "else:",
                        "lineNumber": 151,
                        "lineChange": "none"
                      },
                      {
                        "line": "    if os.path.isfile(schema):",
                        "lineNumber": 152,
                        "lineChange": "none"
                      },
                      {
                        "line": "        schema = 'file://' + os.path.realpath(schema)",
                        "lineNumber": 153,
                        "lineChange": "none"
                      },
                      {
                        "line": "    req = urllib.request.Request(schema)",
                        "lineNumber": 154,
                        "lineChange": "none"
                      },
                      {
                        "line": "    response = urllib.request.urlopen(req)",
                        "lineNumber": 155,
                        "lineChange": "none"
                      },
                      {
                        "line": "info(\"Parsing schema\")",
                        "lineNumber": 157,
                        "lineChange": "none"
                      },
                      {
                        "line": "# Note that JSON is valid YAML, so we can use the YAML parser whether",
                        "lineNumber": 158,
                        "lineChange": "none"
                      },
                      {
                        "line": "# the schema is stored in JSON or YAML",
                        "lineNumber": 159,
                        "lineChange": "none"
                      },
                      {
                        "line": "data = yaml.load(response.read())",
                        "lineNumber": 160,
                        "lineChange": "removed"
                      },
                      {
                        "line": "data = yaml.load(response.read(), Loader=yaml.SafeLoader)",
                        "lineNumber": 160,
                        "lineChange": "added"
                      },
                      {
                        "line": "if 'swagger' in data:",
                        "lineNumber": 162,
                        "lineChange": "none"
                      }
                    ]
                  },
                  {
                    "commitURL": "https://github.com/joerussbowman/gaeutilities/commit/94df313e6c3000310336d2e8b4f9ebcc50a651d9?diff=split#diff-2d85cdba0684f699b2d7b1306a9d8419R179",
                    "lines": [
                      {
                        "line": "query = _AppEngineUtilities_SessionData.all()",
                        "lineNumber": 176,
                        "lineChange": "added"
                      },
                      {
                        "line": "query.filter('session_key', self.session_key)",
                        "lineNumber": 177,
                        "lineChange": "added"
                      },
                      {
                        "line": "results = query.fetch(1000)",
                        "lineNumber": 178,
                        "lineChange": "added"
                      },
                      {
                        "line": "return results",
                        "lineNumber": 179,
                        "lineChange": "added"
                      },
                      {
                        "line": "if keyname != None:",
                        "lineNumber": 563,
                        "lineChange": "none"
                      },
                      {
                        "line": "    query.filter('keyname =', keyname)",
                        "lineNumber": 564,
                        "lineChange": "none"
                      },
                      {
                        "line": "results = query.fetch(1000)",
                        "lineNumber": 565,
                        "lineChange": "none"
                      },
                      {
                        "line": "if len(results) is 0:",
                        "lineNumber": 567,
                        "lineChange": "none"
                      },
                      {
                        "line": "if data:",
                        "lineNumber": 705,
                        "lineChange": "none"
                      },
                      {
                        "line": "    #UNPICKLING CACHE self.cache[keyname] = data.content",
                        "lineNumber": 706,
                        "lineChange": "none"
                      },
                      {
                        "line": "    self.cache[keyname] = pickle.loads(data.content)",
                        "lineNumber": 707,
                        "lineChange": "none"
                      },
                      {
                        "line": "    self._set_memcache()",
                        "lineNumber": 497,
                        "lineChange": "removed"
                      },
                      {
                        "line": "    return pickle.loads(data.content)",
                        "lineNumber": 708,
                        "lineChange": "none"
                      },
                      {
                        "line": "else:",
                        "lineNumber": 709,
                        "lineChange": "none"
                      },
                      {
                        "line": "    raise KeyError(str(keyname))",
                        "lineNumber": 710,
                        "lineChange": "none"
                      }
                    ]
                  }
                ],
                "exampleCommitDescriptions": [
                  "Remove pickle support.",
                  "Switch to yaml.safe_load to avoid PyYAML 5.1 warnings",
                  "Updated modules that load and dump YAML after recent YAML utils changes."
                ],
                "precision": "very-high",
                "repoDatasetSize": 89,
                "cwe": [
                  "CWE-502"
                ]
              }
            },
            {
              "id": "python/WebCookieWithSecureFalse",
              "name": "WebCookieWithSecureFalse",
              "shortDescription": {
                "text": "Sensitive Cookie in HTTPS Session Without 'Secure' Attribute"
              },
              "defaultConfiguration": {
                "level": "error"
              },
              "help": {
                "markdown": "\n## Details\n\nIn a session hijacking attack, if a cookie containing sensitive data is set without the `secure` attribute, an attacker might be able to intercept that cookie. Once the attacker has this information, they can potentially impersonate a user, accessing confidential data and performing actions that they would not normally be authorized to do. Attackers often gain access to this sensitive cookie data when it is transmitted insecurely in plain text over a standard HTTP session, rather than being encrypted and sent over an HTTPS session. This type of attack is highly preventable by following best practices when setting sensitive session cookies.\n\n### Best practices for prevention\n* Set the `secure` attribute in the response header when setting cookies on the client side, and use a test tool to verify that secure cookie transmission is in place.\n* Always use HTTPS for all login pages and never redirect from HTTP to HTTPS, which leaves secure session data open to interception.\n* Follow other best practices when it comes to session cookies, such as setting the HttpOnly flag and maintaining highly time-limited sessions.\n* Consider implementing browser checks and providing secure data only within a browser that supports tight cookie security.\n* Generate session IDs in a way that is not easily predictable, invalidate sessions upon logout, and never reuse session IDs.\n* Educate developers to use built-in secure session-management functionality within the development environment instead of taking a DIY approach.",
                "text": ""
              },
              "properties": {
                "tags": [
                  "python"
                ],
                "categories": [
                  "Security"
                ],
                "exampleCommitFixes": [
                  {
                    "commitURL": "https://github.com/codeforpdx/recordexpungPDX/commit/c5103538506ea2e3b000da6f06ee96930a039e7c?diff=split#diff-36e00c98bcde285cdef4c31d34e48888L56",
                    "lines": [
                      {
                        "line": "#",
                        "lineNumber": 53,
                        "lineChange": "removed"
                      },
                      {
                        "line": "# We will need an OECILogout endpoint to remove httponly=true cookies from frontend",
                        "lineNumber": 54,
                        "lineChange": "removed"
                      },
                      {
                        "line": "# TODO: We will need an OECILogout endpoint to remove httponly=true cookies from frontend",
                        "lineNumber": 49,
                        "lineChange": "added"
                      },
                      {
                        "line": "response.set_cookie(",
                        "lineNumber": 55,
                        "lineChange": "none"
                      },
                      {
                        "line": "    \"oeci_token\",",
                        "lineNumber": 56,
                        "lineChange": "none"
                      },
                      {
                        "line": "    secure=False,",
                        "lineNumber": 57,
                        "lineChange": "removed"
                      },
                      {
                        "line": "    secure=os.getenv(\"TIER\") == \"production\",",
                        "lineNumber": 52,
                        "lineChange": "added"
                      },
                      {
                        "line": "    httponly=False,",
                        "lineNumber": 58,
                        "lineChange": "none"
                      },
                      {
                        "line": "    samesite=\"strict\",",
                        "lineNumber": 59,
                        "lineChange": "none"
                      }
                    ]
                  },
                  {
                    "commitURL": "https://github.com/spaam/svtplay-dl/commit/cbf100139c3e7499053e1db5f54d58a335d3805f?diff=split#diff-6e5abde2164af7bc5d336e9cd63ae08fL38",
                    "lines": [
                      {
                        "line": "    sys.exit(2)",
                        "lineNumber": 41,
                        "lineChange": "none"
                      },
                      {
                        "line": "authToken = jsondata[\"userData\"][\"auth\"]",
                        "lineNumber": 42,
                        "lineChange": "none"
                      },
                      {
                        "line": "cc = Cookie(version=0, name='authToken',",
                        "lineNumber": 43,
                        "lineChange": "none"
                      },
                      {
                        "line": "              value=authToken,",
                        "lineNumber": 44,
                        "lineChange": "none"
                      },
                      {
                        "line": "              port=None, port_specified=False,",
                        "lineNumber": 45,
                        "lineChange": "none"
                      },
                      {
                        "line": "domain_specified=True,",
                        "lineNumber": 47,
                        "lineChange": "none"
                      },
                      {
                        "line": "domain_initial_dot=True, path='/',",
                        "lineNumber": 48,
                        "lineChange": "none"
                      },
                      {
                        "line": "path_specified=True, secure=False,",
                        "lineNumber": 49,
                        "lineChange": "none"
                      },
                      {
                        "line": "expires=None, discard=True, comment=None,",
                        "lineNumber": 50,
                        "lineChange": "none"
                      },
                      {
                        "line": "comment_url=None, rest={'HttpOnly': None})",
                        "lineNumber": 51,
                        "lineChange": "none"
                      }
                    ]
                  },
                  {
                    "commitURL": "https://github.com/mitre/caldera/blob/0b2c9e0fedf460bb083193ac45fbf1121507675b/caldera/app/views.py#L235-L237",
                    "lines": [
                      {
                        "line": "if token is not None:",
                        "lineNumber": 234,
                        "lineChange": "none"
                      },
                      {
                        "line": "    resp = web.Response(text=token)",
                        "lineNumber": 235,
                        "lineChange": "none"
                      },
                      {
                        "line": "    resp.set_cookie('AUTH', token, secure=True)",
                        "lineNumber": 236,
                        "lineChange": "none"
                      },
                      {
                        "line": "else:",
                        "lineNumber": 237,
                        "lineChange": "none"
                      },
                      {
                        "line": "    resp = web.HTTPUnauthorized()",
                        "lineNumber": 238,
                        "lineChange": "none"
                      }
                    ]
                  }
                ],
                "exampleCommitDescriptions": [
                  "missing sys import",
                  "Ensure HTTP cookies are secure=True on production"
                ],
                "precision": "very-high",
                "repoDatasetSize": 18,
                "cwe": [
                  "CWE-614"
                ]
              }
            },
            {
              "id": "python/NoHardcodedCredentials",
              "name": "NoHardcodedCredentials",
              "shortDescription": {
                "text": "Use of Hardcoded Credentials"
              },
              "defaultConfiguration": {
                "level": "warning"
              },
              "help": {
                "markdown": "\n## Details\n\nDevelopers may use hardcoded credentials for convenience when coding in order to simplify their workflow. While they are responsible for removing these before production, occasionally this task may fall through the cracks. This also becomes a maintenance challenge when credentials are re-used across multiple applications.\n\nOnce attackers gain access, they may take advantage of privilege level to remove or alter data, take down a site or app, or hold any of the above for ransom. The risk across multiple similar projects is even greater. If code containing the credentials is reused across multiple projects, they will all be compromised.\n\n### Best practices for prevention\n* Plan software architecture such that keys and passwords are always stored outside the code, wherever possible.\n* Plan encryption into software architecture for all credential information and ensure proper handling of keys, credentials, and passwords.\n* Prompt for a secure password on first login rather than hard-code a default password.\n* If a hardcoded password or credential must be used, limit its use, for example, to system console users rather than via the network.\n* Use strong hashes for inbound password authentication, ideally with randomly assigned salts to increase the difficulty level in case of brute-force attack.",
                "text": ""
              },
              "properties": {
                "tags": [
                  "python"
                ],
                "categories": [
                  "Security"
                ],
                "exampleCommitFixes": [
                  {
                    "commitURL": "https://github.com/fizyk/pyramid_fullauth/commit/1ce35049319e3e054db1ff2e3a38ae7960ec724e?diff=split#diff-327b130c82fa4e83e97f6c1a50a0da1cL123",
                    "lines": [
                      {
                        "line": ")",
                        "lineNumber": 121,
                        "lineChange": "none"
                      },
                      {
                        "line": "self.create_user(username=u'u1')",
                        "lineNumber": 122,
                        "lineChange": "removed"
                      },
                      {
                        "line": "self.create_user(username=text_type('u1'))",
                        "lineNumber": 123,
                        "lineChange": "added"
                      },
                      {
                        "line": "user = self.session.query(User).filter(User.username == u'u1').one()",
                        "lineNumber": 124,
                        "lineChange": "removed"
                      },
                      {
                        "line": "user = self.session.query(User).filter(User.username == text_type('u1')).one()",
                        "lineNumber": 125,
                        "lineChange": "added"
                      }
                    ]
                  },
                  {
                    "commitURL": "https://github.com/pytest-dev/pytest-django/commit/0afc1866ba52db6d1ddd120c1536b121441317de?diff=split#diff-b8d58f3cc3175f8ec7bc9441f7d0bd32L205",
                    "lines": [
                      {
                        "line": "client = Client()",
                        "lineNumber": 232,
                        "lineChange": "none"
                      },
                      {
                        "line": "client.login(username='admin', password='password')",
                        "lineNumber": 204,
                        "lineChange": "removed"
                      },
                      {
                        "line": "client.login(username=admin_user.username, password='password')",
                        "lineNumber": 233,
                        "lineChange": "added"
                      },
                      {
                        "line": "return client",
                        "lineNumber": 234,
                        "lineChange": "none"
                      }
                    ]
                  },
                  {
                    "commitURL": "https://github.com/sehmaschine/django-filebrowser/commit/51d5af672eee311233309f107ad2c169a97f6291?diff=split#diff-789dacd8699dcbbc99f131ae8fa04326L45",
                    "lines": [
                      {
                        "line": "super(BrowseViewTests, self).setUp()",
                        "lineNumber": 38,
                        "lineChange": "none"
                      },
                      {
                        "line": "    self.url = reverse('filebrowser:fb_browse')",
                        "lineNumber": 43,
                        "lineChange": "none"
                      },
                      {
                        "line": "    self.client.login(username='testuser', password='password')",
                        "lineNumber": 44,
                        "lineChange": "removed"
                      },
                      {
                        "line": "    self.client.login(username=self.user.username, password='password')",
                        "lineNumber": 39,
                        "lineChange": "added"
                      },
                      {
                        "line": "def test_get(self):",
                        "lineNumber": 46,
                        "lineChange": "none"
                      }
                    ]
                  }
                ],
                "exampleCommitDescriptions": [
                  "Tests for retrieving user auth tokens",
                  "Updates tests and docs.",
                  "Use a test backend for client login (supports) ()"
                ],
                "precision": "very-high",
                "repoDatasetSize": 172,
                "cwe": [
                  "CWE-798"
                ]
              }
            },
            {
              "id": "python/Sqli",
              "name": "Sqli",
              "shortDescription": {
                "text": "SQL Injection"
              },
              "defaultConfiguration": {
                "level": "error"
              },
              "help": {
                "markdown": "## Details\n\nIn an SQL injection attack, the user can submit an SQL query directly to the database, gaining access without providing appropriate credentials. Attackers can then view, export, modify, and delete confidential information; change passwords and other authentication information; and possibly gain access to other systems within the network. This is one of the most commonly exploited categories of vulnerability, but can largely be avoided through good coding practices.\n\n### Best practices for prevention\n* Avoid passing user-entered parameters directly to the SQL server.\n* Avoid using string concatenation to build SQL queries from user-entered parameters.\n* When coding, define SQL code first, then pass in parameters. Use prepared statements with parameterized queries. Examples include `SqlCommand()` in .NET and `bindParam()` in PHP.\n* Use strong typing for all parameters so unexpected user data will be rejected.\n* Where direct user input cannot be avoided for performance reasons, validate input against a very strict allowlist of permitted characters, avoiding special characters such as `? & / < > ; - ' \" \\` and spaces. Use a vendor-supplied escaping routine if possible.\n* Develop your application in an environment and/or using libraries that provide protection against SQL injection.\n* Harden your entire environment around a least-privilege model, ideally with isolated accounts with privileges only for particular tasks.",
                "text": ""
              },
              "properties": {
                "tags": [
                  "python"
                ],
                "categories": [
                  "Security"
                ],
                "exampleCommitFixes": [
                  {
                    "commitURL": "https://github.com/StorminStanley/st2incubator/commit/0b4500580e10365fa7f4fe8b2e96dbba2bd329bf?diff=split#diff-89a765364608cb3b1d14490dac121336L50",
                    "lines": [
                      {
                        "line": "def poll(self):",
                        "lineNumber": 47,
                        "lineChange": "none"
                      },
                      {
                        "line": "    registration = {}",
                        "lineNumber": 48,
                        "lineChange": "none"
                      },
                      {
                        "line": "    api_registration_list = self._get_api_registrations()",
                        "lineNumber": 49,
                        "lineChange": "none"
                      },
                      {
                        "line": "    for r in api_registration_list.get('responses', None):",
                        "lineNumber": 51,
                        "lineChange": "none"
                      },
                      {
                        "line": "        user = r.get('answers', None)",
                        "lineNumber": 52,
                        "lineChange": "none"
                      },
                      {
                        "line": "        meta = r.get('metadata', None)",
                        "lineNumber": 53,
                        "lineChange": "none"
                      },
                      {
                        "line": "        if not self._check_db_registrations(user.get(EMAIL_FIELD, False)):",
                        "lineNumber": 54,
                        "lineChange": "none"
                      },
                      {
                        "line": "            registration['email'] = user.get(EMAIL_FIELD, None)",
                        "lineNumber": 55,
                        "lineChange": "none"
                      },
                      {
                        "line": "            registration['first_name'] = user.get(FIRST_NAME_FIELD, None)",
                        "lineNumber": 56,
                        "lineChange": "none"
                      },
                      {
                        "line": "headers['Content-Type'] = 'application/x-www-form-urlencoded'",
                        "lineNumber": 68,
                        "lineChange": "none"
                      },
                      {
                        "line": "response = requests.get(url=self.url, headers=headers)",
                        "lineNumber": 70,
                        "lineChange": "none"
                      },
                      {
                        "line": "if response.status_code == httplib.OK:",
                        "lineNumber": 72,
                        "lineChange": "none"
                      },
                      {
                        "line": "    return response.json()",
                        "lineNumber": 73,
                        "lineChange": "none"
                      },
                      {
                        "line": "else:",
                        "lineNumber": 74,
                        "lineChange": "none"
                      },
                      {
                        "line": "    failure_reason = ('Failed to retrieve registrations: %s \\",
                        "lineNumber": 75,
                        "lineChange": "none"
                      },
                      {
                        "line": "    return url",
                        "lineNumber": 98,
                        "lineChange": "none"
                      },
                      {
                        "line": "def _check_db_registrations(self, email):",
                        "lineNumber": 100,
                        "lineChange": "none"
                      },
                      {
                        "line": "    email = MySQLdb.escape_string(email)",
                        "lineNumber": 101,
                        "lineChange": "added"
                      },
                      {
                        "line": "    c = self.db.cursor()",
                        "lineNumber": 102,
                        "lineChange": "none"
                      },
                      {
                        "line": "    query = 'SELECT * FROM user_registration WHERE email=\"%s\"' % email",
                        "lineNumber": 103,
                        "lineChange": "none"
                      },
                      {
                        "line": "    try:",
                        "lineNumber": 104,
                        "lineChange": "none"
                      },
                      {
                        "line": "        c.execute(query)",
                        "lineNumber": 105,
                        "lineChange": "none"
                      },
                      {
                        "line": "    except MySQLdb.Error, e:",
                        "lineNumber": 106,
                        "lineChange": "none"
                      },
                      {
                        "line": "        print str(e)",
                        "lineNumber": 107,
                        "lineChange": "none"
                      }
                    ]
                  },
                  {
                    "commitURL": "https://github.com/2du/openNAMU/commit/b6770952726b189c25eed593580f050daac35859?diff=split#diff-9b1da13e760364a1b42848ff2e159ed2L49",
                    "lines": [
                      {
                        "line": "    db = set_data['db']",
                        "lineNumber": 46,
                        "lineChange": "none"
                      },
                      {
                        "line": ")",
                        "lineNumber": 47,
                        "lineChange": "none"
                      },
                      {
                        "line": "curs = conn.cursor(pymysql.cursors.DictCursor)",
                        "lineNumber": 48,
                        "lineChange": "none"
                      },
                      {
                        "line": "ip = ip_check() ",
                        "lineNumber": 50,
                        "lineChange": "none"
                      },
                      {
                        "line": "curs.execute(\"select acl from user where id = '\" + db_pas(ip) + \"'\")",
                        "lineNumber": 51,
                        "lineChange": "removed"
                      },
                      {
                        "line": "curs.execute(\"select acl from user where id = '\" + pymysql.escape_string(ip) + \"'\")",
                        "lineNumber": 49,
                        "lineChange": "added"
                      },
                      {
                        "line": "user = curs.fetchall()",
                        "lineNumber": 52,
                        "lineChange": "none"
                      },
                      {
                        "line": "if(user):",
                        "lineNumber": 53,
                        "lineChange": "none"
                      },
                      {
                        "line": "    reset = 0",
                        "lineNumber": 54,
                        "lineChange": "none"
                      },
                      {
                        "line": "    while(1):",
                        "lineNumber": 55,
                        "lineChange": "none"
                      },
                      {
                        "line": "        if(num == 1 and reset == 0):",
                        "lineNumber": 56,
                        "lineChange": "none"
                      },
                      {
                        "line": "            curs.execute('select name from alist where name = \"' + db_pas(user[0][\"acl\"]) + '\" and acl = \"ban\"')",
                        "lineNumber": 57,
                        "lineChange": "removed"
                      },
                      {
                        "line": "            curs.execute('select name from alist where name = \"' + pymysql.escape_string(user[0][\"acl\"]) + '\" and acl = \"ban\"')",
                        "lineNumber": 55,
                        "lineChange": "added"
                      },
                      {
                        "line": "            acl_data = curs.fetchall()",
                        "lineNumber": 58,
                        "lineChange": "none"
                      },
                      {
                        "line": "            if(acl_data):",
                        "lineNumber": 59,
                        "lineChange": "none"
                      },
                      {
                        "line": "        reset = 1",
                        "lineNumber": 63,
                        "lineChange": "none"
                      },
                      {
                        "line": "elif(num == 2 and reset == 0):",
                        "lineNumber": 64,
                        "lineChange": "none"
                      },
                      {
                        "line": "    curs.execute('select name from alist where name = \"' + db_pas(user[0][\"acl\"]) + '\" and acl = \"mdel\"')",
                        "lineNumber": 65,
                        "lineChange": "removed"
                      },
                      {
                        "line": "    curs.execute('select name from alist where name = \"' + pymysql.escape_string(user[0][\"acl\"]) + '\" and acl = \"mdel\"')",
                        "lineNumber": 63,
                        "lineChange": "added"
                      },
                      {
                        "line": "    acl_data = curs.fetchall()",
                        "lineNumber": 66,
                        "lineChange": "none"
                      },
                      {
                        "line": "    if(acl_data):",
                        "lineNumber": 67,
                        "lineChange": "none"
                      },
                      {
                        "line": "        reset = 1",
                        "lineNumber": 71,
                        "lineChange": "none"
                      },
                      {
                        "line": "elif(num == 3 and reset == 0):",
                        "lineNumber": 72,
                        "lineChange": "none"
                      },
                      {
                        "line": "    curs.execute('select name from alist where name = \"' + db_pas(user[0][\"acl\"]) + '\" and acl = \"toron\"')",
                        "lineNumber": 73,
                        "lineChange": "removed"
                      },
                      {
                        "line": "    curs.execute('select name from alist where name = \"' + pymysql.escape_string(user[0][\"acl\"]) + '\" and acl = \"toron\"')",
                        "lineNumber": 71,
                        "lineChange": "added"
                      },
                      {
                        "line": "    acl_data = curs.fetchall()",
                        "lineNumber": 74,
                        "lineChange": "none"
                      },
                      {
                        "line": "    if(acl_data):",
                        "lineNumber": 75,
                        "lineChange": "none"
                      },
                      {
                        "line": "        reset = 1",
                        "lineNumber": 79,
                        "lineChange": "none"
                      },
                      {
                        "line": "elif(num == 4 and reset == 0):",
                        "lineNumber": 80,
                        "lineChange": "none"
                      },
                      {
                        "line": "    curs.execute('select name from alist where name = \"' + db_pas(user[0][\"acl\"]) + '\" and acl = \"check\"')",
                        "lineNumber": 81,
                        "lineChange": "removed"
                      },
                      {
                        "line": "    curs.execute('select name from alist where name = \"' + pymysql.escape_string(user[0][\"acl\"]) + '\" and acl = \"check\"')",
                        "lineNumber": 79,
                        "lineChange": "added"
                      },
                      {
                        "line": "    acl_data = curs.fetchall()",
                        "lineNumber": 82,
                        "lineChange": "none"
                      },
                      {
                        "line": "    if(acl_data):",
                        "lineNumber": 83,
                        "lineChange": "none"
                      },
                      {
                        "line": "        reset = 1",
                        "lineNumber": 87,
                        "lineChange": "none"
                      },
                      {
                        "line": "elif(num == 5 and reset == 0):",
                        "lineNumber": 88,
                        "lineChange": "none"
                      },
                      {
                        "line": "    curs.execute('select name from alist where name = \"' + db_pas(user[0][\"acl\"]) + '\" and acl = \"acl\"')",
                        "lineNumber": 89,
                        "lineChange": "removed"
                      },
                      {
                        "line": "    curs.execute('select name from alist where name = \"' + pymysql.escape_string(user[0][\"acl\"]) + '\" and acl = \"acl\"')",
                        "lineNumber": 87,
                        "lineChange": "added"
                      },
                      {
                        "line": "    acl_data = curs.fetchall()",
                        "lineNumber": 90,
                        "lineChange": "none"
                      },
                      {
                        "line": "    if(acl_data):",
                        "lineNumber": 91,
                        "lineChange": "none"
                      },
                      {
                        "line": "        reset = 1",
                        "lineNumber": 95,
                        "lineChange": "none"
                      },
                      {
                        "line": "elif(num == 6 and reset == 0):",
                        "lineNumber": 96,
                        "lineChange": "none"
                      },
                      {
                        "line": "    curs.execute('select name from alist where name = \"' + db_pas(user[0][\"acl\"]) + '\" and acl = \"hidel\"')",
                        "lineNumber": 97,
                        "lineChange": "removed"
                      },
                      {
                        "line": "    curs.execute('select name from alist where name = \"' + pymysql.escape_string(user[0][\"acl\"]) + '\" and acl = \"hidel\"')",
                        "lineNumber": 95,
                        "lineChange": "added"
                      },
                      {
                        "line": "    acl_data = curs.fetchall()",
                        "lineNumber": 98,
                        "lineChange": "none"
                      },
                      {
                        "line": "    if(acl_data):",
                        "lineNumber": 99,
                        "lineChange": "none"
                      }
                    ]
                  },
                  {
                    "commitURL": "https://github.com/jhaals/python-filebutler/commit/eb7a450fe655bb41f389a0ac172f774f6ff4f662?diff=split#diff-7d67e4b70981ce613dc077a16796d7faL31",
                    "lines": [
                      {
                        "line": "file = request.files['file']",
                        "lineNumber": 29,
                        "lineChange": "none"
                      },
                      {
                        "line": "username = request.form['username']",
                        "lineNumber": 30,
                        "lineChange": "none"
                      },
                      {
                        "line": "password = request.form['password']",
                        "lineNumber": 31,
                        "lineChange": "none"
                      },
                      {
                        "line": "download_password = request.form['download_password']",
                        "lineNumber": 32,
                        "lineChange": "none"
                      },
                      {
                        "line": "# connect to sqlite and check if user exists",
                        "lineNumber": 36,
                        "lineChange": "none"
                      },
                      {
                        "line": "conn = sqlite3.connect(app.config['DATABASE'])",
                        "lineNumber": 37,
                        "lineChange": "none"
                      },
                      {
                        "line": "c = conn.cursor()",
                        "lineNumber": 38,
                        "lineChange": "none"
                      },
                      {
                        "line": "c.execute(\"select id, password from users where username='%s'\" % (username))",
                        "lineNumber": 39,
                        "lineChange": "removed"
                      },
                      {
                        "line": "c.execute(\"select id, password from users where username=?\", (username,))",
                        "lineNumber": 39,
                        "lineChange": "added"
                      },
                      {
                        "line": "try:",
                        "lineNumber": 41,
                        "lineChange": "none"
                      }
                    ]
                  }
                ],
                "exampleCommitDescriptions": [
                  "SQL fixes and lots of tests for:",
                  "Migrate translation tests from sql-alchemy branch",
                  "Cleanup db handling ()"
                ],
                "precision": "very-high",
                "repoDatasetSize": 159,
                "cwe": [
                  "CWE-89"
                ]
              }
            },
            {
              "id": "python/HardcodedNonCryptoSecret",
              "name": "HardcodedNonCryptoSecret",
              "shortDescription": {
                "text": "Hardcoded Secret"
              },
              "defaultConfiguration": {
                "level": "error"
              },
              "help": {
                "markdown": "## Details\n\nWhen constants are hardcoded into applications, this information could easily be reverse-engineered and become known to attackers. For example, if a breached authentication token is hardcoded in multiple places in the application, it may lead to components of the application remaining vulnerable if not all instances are changed.\nAnother negative effect of hard-coding constants is potential unpredictability in the application's performance if the development team fails to update every single instance of the hardcoded constant throughout the code. For these reasons, hard-coding security-relevant constants is considered bad coding practice and should be remedied if present and avoided in future.\n\n### Best practices for prevention\n- Never hard code security-related constants; use symbolic names or configuration lookup files.\n- As hard coding is often done by coders working alone on a small scale, examine all legacy code components and test carefully when scaling.\n- Adopt a \"future-proof code\" mindset: While use of constants may save a little time now and make development simpler in the short term, it could cost time and money adapting to scale or other unforeseen circumstances (such as new hardware) in the future.",
                "text": ""
              },
              "properties": {
                "tags": [
                  "python"
                ],
                "categories": [
                  "Security"
                ],
                "exampleCommitFixes": [
                  {
                    "commitURL": "https://github.com/devjones/PyEtherpadLite/commit/ffd6855a403edc475b6f7504a7e1eb241703562f?diff=split#diff-808e8b4d690175761cb0bac5bb3ed0a1L18",
                    "lines": [
                      {
                        "line": "TIMEOUT = 20",
                        "lineNumber": 15,
                        "lineChange": "none"
                      },
                      {
                        "line": "apiKey = \"EtherKey54\"",
                        "lineNumber": 17,
                        "lineChange": "removed"
                      },
                      {
                        "line": "apiKey = \"\"",
                        "lineNumber": 17,
                        "lineChange": "added"
                      },
                      {
                        "line": "baseUrl = \"http://localhost:9001/api\"",
                        "lineNumber": 18,
                        "lineChange": "none"
                      }
                    ]
                  },
                  {
                    "commitURL": "https://github.com/mongodb-labs/mongo-web-shell/commit/d6de15427d22298f3baae4197d96e5b9fd83b5e5?diff=split#diff-716c96263f9764c99aac36887f0a2d0fL18",
                    "lines": [
                      {
                        "line": "# flask.config settings.",
                        "lineNumber": 15,
                        "lineChange": "none"
                      },
                      {
                        "line": "DEBUG = True",
                        "lineNumber": 16,
                        "lineChange": "none"
                      },
                      {
                        "line": "SECRET_KEY = 'A0gjhsd3678HK'",
                        "lineNumber": 17,
                        "lineChange": "removed"
                      },
                      {
                        "line": "SECRET_KEY = 'foo'",
                        "lineNumber": 17,
                        "lineChange": "added"
                      },
                      {
                        "line": "# Misc settings.",
                        "lineNumber": 19,
                        "lineChange": "none"
                      }
                    ]
                  },
                  {
                    "commitURL": "https://github.com/wepay/Python-SDK/commit/c3dedacbea2a555afe7a1b75fc940572fc7064f4?diff=split#diff-973a3e450a782166ba326d95a36fe25bL6",
                    "lines": [
                      {
                        "line": " from wepay import WePay",
                        "lineNumber": 2,
                        "lineChange": "none"
                      },
                      {
                        "line": "CLIENT_ID = '33518'",
                        "lineNumber": 4,
                        "lineChange": "removed"
                      },
                      {
                        "line": "CLIENT_SECRET = '9c7a077b7e'",
                        "lineNumber": 5,
                        "lineChange": "removed"
                      },
                      {
                        "line": "CLIENT_ID = ''",
                        "lineNumber": 4,
                        "lineChange": "added"
                      },
                      {
                        "line": "CLIENT_SECRET = ''",
                        "lineNumber": 5,
                        "lineChange": "added"
                      },
                      {
                        "line": "IN_PRODUCTION = False",
                        "lineNumber": 6,
                        "lineChange": "none"
                      }
                    ]
                  }
                ],
                "exampleCommitDescriptions": [
                  "Fix API keys in tests",
                  "Changed secret key in test settings",
                  "Move credentials to an INI file"
                ],
                "precision": "very-high",
                "repoDatasetSize": 253,
                "cwe": [
                  "CWE-547"
                ]
              }
            },
            {
              "id": "python/PT",
              "name": "PT",
              "shortDescription": {
                "text": "Path Traversal"
              },
              "defaultConfiguration": {
                "level": "error"
              },
              "help": {
                "markdown": "## Details\n\nA Directory Traversal attack (also known as path traversal) aims to access files and directories that are stored outside the intended folder. By manipulating files with \"dot-dot-slash (../)\" sequences and its variations, or by using absolute file paths, it may be possible to access arbitrary files and directories stored on file system, including application source code, configuration, and other critical system files.\n\nBeing able to access and manipulate an arbitrary path leads to vulnerabilities when a program is being run with privileges that the user providing the path should not have. A website with a path traversal vulnerability would allow users access to sensitive files on the server hosting it. CLI programs may also be vulnerable to path traversal if they are being ran with elevated privileges (such as with the setuid or setgid flags in Unix systems).\n\nDirectory Traversal vulnerabilities can be generally divided into two types:\n\n- **Information Disclosure**: Allows the attacker to gain information about the folder structure or read the contents of sensitive files on the system.\n\n`st` is a module for serving static files on web pages, and contains a [vulnerability of this type](https://snyk.io/vuln/npm:st:20140206). In our example, we will serve files from the `public` route.\n\nIf an attacker requests the following URL from our server, it will in turn leak the sensitive private key of the root user.\n\n```\ncurl http://localhost:8080/public/%2e%2e/%2e%2e/%2e%2e/%2e%2e/%2e%2e/root/.ssh/id_rsa\n```\n**Note** `%2e` is the URL encoded version of `.` (dot).\n\n- **Writing arbitrary files**: Allows the attacker to create or replace existing files. This type of vulnerability is also known as `Zip-Slip`.\n\nOne way to achieve this is by using a malicious `zip` archive that holds path traversal filenames. When each filename in the zip archive gets concatenated to the target extraction folder, without validation, the final path ends up outside of the target folder. If an executable or a configuration file is overwritten with a file containing malicious code, the problem can turn into an arbitrary code execution issue quite easily.\n\nThe following is an example of a `zip` archive with one benign file and one malicious file. Extracting the malicious file will result in traversing out of the target folder, ending up in `/root/.ssh/` overwriting the `authorized_keys` file:\n\n```\n2018-04-15 22:04:29 .....           19           19  good.txt\n2018-04-15 22:04:42 .....           20           20  ../../../../../../root/.ssh/authorized_keys\n```",
                "text": ""
              },
              "properties": {
                "tags": [
                  "python"
                ],
                "categories": [
                  "Security"
                ],
                "exampleCommitFixes": [
                  {
                    "commitURL": "https://github.com/pynickle/amazing-python/commit/80d2cc8c3e2c8330416b91f17a09b51830915b86?diff=split#diff-f626b00ab4d99fdbd4cb2bd61ae29469L118",
                    "lines": [
                      {
                        "line": "if request.method == \"POST\":",
                        "lineNumber": 161,
                        "lineChange": "none"
                      },
                      {
                        "line": "    try:",
                        "lineNumber": 162,
                        "lineChange": "none"
                      },
                      {
                        "line": "        f = request.files['file']",
                        "lineNumber": 163,
                        "lineChange": "none"
                      },
                      {
                        "line": "        filename = f.filename",
                        "lineNumber": 118,
                        "lineChange": "removed"
                      },
                      {
                        "line": "        filename = secure_filename(f.filename)",
                        "lineNumber": 164,
                        "lineChange": "added"
                      },
                      {
                        "line": "        f.save(filename)",
                        "lineNumber": 165,
                        "lineChange": "none"
                      },
                      {
                        "line": "        with open(filename, \"r\", encoding=\"utf-8\") as f:",
                        "lineNumber": 166,
                        "lineChange": "none"
                      },
                      {
                        "line": "            success, errors = words_validate(f.read())",
                        "lineNumber": 167,
                        "lineChange": "none"
                      }
                    ]
                  },
                  {
                    "commitURL": "https://github.com/WhaleShark-Team/cobra/commit/1ac467a2c1cf8427a5bf60031677817140fe181c?diff=split#diff-dc0ad7c98d7072655327746f1bc95b3aL72",
                    "lines": [
                      {
                        "line": "task_type = 1",
                        "lineNumber": 70,
                        "lineChange": "none"
                      },
                      {
                        "line": "# check if there is a file or gitlab url",
                        "lineNumber": 71,
                        "lineChange": "none"
                      },
                      {
                        "line": "if len(request.files) == 0:",
                        "lineNumber": 72,
                        "lineChange": "none"
                      },
                      {
                        "line": "    # no files, should check username and password",
                        "lineNumber": 73,
                        "lineChange": "none"
                      },
                      {
                        "line": "    task_type = 1",
                        "lineNumber": 74,
                        "lineChange": "none"
                      },
                      {
                        "line": "# there is a file, check file format and uncompress it.",
                        "lineNumber": 88,
                        "lineChange": "none"
                      },
                      {
                        "line": "task_type = 2",
                        "lineNumber": 89,
                        "lineChange": "none"
                      },
                      {
                        "line": "upload_src = request.files['file']",
                        "lineNumber": 90,
                        "lineChange": "none"
                      },
                      {
                        "line": "filename = str(int(time.time())) + '_' + upload_src.filename",
                        "lineNumber": 90,
                        "lineChange": "removed"
                      },
                      {
                        "line": "filename = str(int(time.time())) + '_' + secure_filename(upload_src.filename)",
                        "lineNumber": 91,
                        "lineChange": "added"
                      },
                      {
                        "line": "filepath = 'uploads/' + filename",
                        "lineNumber": 92,
                        "lineChange": "none"
                      },
                      {
                        "line": "upload_src.save(filepath)",
                        "lineNumber": 93,
                        "lineChange": "none"
                      },
                      {
                        "line": "# if you upload a rar file, upload_src.mimetype will returns \"application/octet-stream\"",
                        "lineNumber": 95,
                        "lineChange": "none"
                      }
                    ]
                  },
                  {
                    "commitURL": "https://github.com/Wordseer/wordseer/commit/ea92ade27f7a7a12d057a2b71daf9ffa1cf4385e?diff=split#diff-e86334029c6a0118169cce848ff474ddR13",
                    "lines": [
                      {
                        "line": " PROJECT_ROUTE = \"/projects/\"",
                        "lineNumber": 10,
                        "lineChange": "none"
                      },
                      {
                        "line": " ",
                        "lineNumber": 11,
                        "lineChange": "none"
                      },
                      {
                        "line": "def allowed_file(filename):",
                        "lineNumber": 12,
                        "lineChange": "added"
                      },
                      {
                        "line": "    return os.path.splitext(filename)[1] in app.config[\"ALLOWED_EXTENSIONS\"]",
                        "lineNumber": 13,
                        "lineChange": "added"
                      },
                      {
                        "line": " @app.route(PROJECT_ROUTE, methods=[\"GET\", \"POST\"])",
                        "lineNumber": 15,
                        "lineChange": "none"
                      },
                      {
                        "line": " def projects():",
                        "lineNumber": 16,
                        "lineChange": "none"
                      },
                      {
                        "line": "if request.method == \"POST\":",
                        "lineNumber": 42,
                        "lineChange": "none"
                      },
                      {
                        "line": "    uploaded_file = request.files[\"uploaded_file\"]",
                        "lineNumber": 43,
                        "lineChange": "none"
                      },
                      {
                        "line": "    if uploaded_file and allowed_file(uploaded_file.filename):",
                        "lineNumber": 44,
                        "lineChange": "none"
                      },
                      {
                        "line": "        filename = secure_filename(uploaded_file.filename)",
                        "lineNumber": 45,
                        "lineChange": "none"
                      },
                      {
                        "line": "        dest_path = os.path.join(app.config[\"UPLOAD_DIR\"],",
                        "lineNumber": 46,
                        "lineChange": "none"
                      },
                      {
                        "line": "            filename)",
                        "lineNumber": 47,
                        "lineChange": "none"
                      },
                      {
                        "line": "        uploaded_file.save(dest_path)",
                        "lineNumber": 48,
                        "lineChange": "none"
                      },
                      {
                        "line": "        #TODO: send the user somewhere useful?",
                        "lineNumber": 49,
                        "lineChange": "none"
                      }
                    ]
                  }
                ],
                "exampleCommitDescriptions": [
                  "update test files for reports.",
                  "Python 3 support",
                  "Add test for handling upload files task"
                ],
                "precision": "very-high",
                "repoDatasetSize": 553,
                "cwe": [
                  "CWE-23"
                ]
              }
            },
            {
              "id": "python/NoHardcodedPasswords",
              "name": "NoHardcodedPasswords",
              "shortDescription": {
                "text": "Use of Hardcoded Credentials"
              },
              "defaultConfiguration": {
                "level": "warning"
              },
              "help": {
                "markdown": "\n## Details\n\nDevelopers may use hardcoded credentials for convenience when coding in order to simplify their workflow. While they are responsible for removing these before production, occasionally this task may fall through the cracks. This also becomes a maintenance challenge when credentials are re-used across multiple applications.\n\nOnce attackers gain access, they may take advantage of privilege level to remove or alter data, take down a site or app, or hold any of the above for ransom. The risk across multiple similar projects is even greater. If code containing the credentials is reused across multiple projects, they will all be compromised.\n\n### Best practices for prevention\n* Plan software architecture such that keys and passwords are always stored outside the code, wherever possible.\n* Plan encryption into software architecture for all credential information and ensure proper handling of keys, credentials, and passwords.\n* Prompt for a secure password on first login rather than hard-code a default password.\n* If a hardcoded password or credential must be used, limit its use, for example, to system console users rather than via the network.\n* Use strong hashes for inbound password authentication, ideally with randomly assigned salts to increase the difficulty level in case of brute-force attack.",
                "text": ""
              },
              "properties": {
                "tags": [
                  "python"
                ],
                "categories": [
                  "Security"
                ],
                "exampleCommitFixes": [
                  {
                    "commitURL": "https://github.com/timgrossmann/TwitPy/commit/a4ef575a6b4bc46cde5c6f4b044cf8402a2391c4?diff=split#diff-958d99effc816f39c7c564e49561306fL4",
                    "lines": [
                      {
                        "line": "from twitpy import TwitPy",
                        "lineNumber": 1,
                        "lineChange": "none"
                      },
                      {
                        "line": "  raise ImportError(\"Missing config.py. Did you copy it from config.py.dist?\")",
                        "lineNumber": 5,
                        "lineChange": "added"
                      },
                      {
                        "line": "TwitPy(username=\"t_tomgrossmann\", password=\"****\") \\",
                        "lineNumber": 3,
                        "lineChange": "removed"
                      },
                      {
                        "line": "TwitPy(username=config.USERNAME, password=config.PASSWORD,",
                        "lineNumber": 7,
                        "lineChange": "added"
                      },
                      {
                        "line": "  chrome_path=config.CHROME_PATH) \\",
                        "lineNumber": 8,
                        "lineChange": "added"
                      },
                      {
                        "line": "  .login() \\",
                        "lineNumber": 9,
                        "lineChange": "none"
                      },
                      {
                        "line": "  .follow_from_recom(amount=250) \\",
                        "lineNumber": 5,
                        "lineChange": "removed"
                      },
                      {
                        "line": "  .follow_from_recom(amount=5) \\",
                        "lineNumber": 10,
                        "lineChange": "added"
                      }
                    ]
                  },
                  {
                    "commitURL": "https://github.com/openstack/sahara/commit/444cd0e2f4e252bb9e7f699cb7e1c45f315e54c7?diff=split#diff-ef5fd68b9b268896bb327a593971c9d0L51",
                    "lines": [
                      {
                        "line": "try:",
                        "lineNumber": 57,
                        "lineChange": "none"
                      },
                      {
                        "line": "    ssh.set_missing_host_key_policy(AutoAddPolicy())",
                        "lineNumber": 58,
                        "lineChange": "none"
                      },
                      {
                        "line": "    ssh.connect(host, username='root', password='swordfish')",
                        "lineNumber": 50,
                        "lineChange": "removed"
                      },
                      {
                        "line": "    ssh.connect(host, username=NODE_USER, password=NODE_PASSWORD)",
                        "lineNumber": 59,
                        "lineChange": "added"
                      },
                      {
                        "line": "    chan = ssh.get_transport().open_session()",
                        "lineNumber": 60,
                        "lineChange": "none"
                      },
                      {
                        "line": "    chan.exec_command(cmd)",
                        "lineNumber": 61,
                        "lineChange": "none"
                      }
                    ]
                  },
                  {
                    "commitURL": "https://github.com/wf1314/zhihu-terminal/commit/8042f1263a6aad419ea6410fa8014f8c706c5022?diff=split#diff-b1a925f111fb1ff1bc708bbb589a0950L116",
                    "lines": [
                      {
                        "line": "from setting import USER, PASSWORD",
                        "lineNumber": 113,
                        "lineChange": "added"
                      },
                      {
                        "line": "async def test():",
                        "lineNumber": 114,
                        "lineChange": "none"
                      },
                      {
                        "line": "    client = ZhihuClient(user='', password='')",
                        "lineNumber": 115,
                        "lineChange": "removed"
                      },
                      {
                        "line": "    client = ZhihuClient(user=USER, password=PASSWORD)",
                        "lineNumber": 115,
                        "lineChange": "added"
                      },
                      {
                        "line": "    await client.login(load_cookies=True)",
                        "lineNumber": 116,
                        "lineChange": "none"
                      },
                      {
                        "line": "    spider = ZhihuSpider(client)",
                        "lineNumber": 117,
                        "lineChange": "none"
                      },
                      {
                        "line": "    await spider.get_recommend_article()",
                        "lineNumber": 118,
                        "lineChange": "none"
                      }
                    ]
                  }
                ],
                "exampleCommitDescriptions": [
                  "Tests for retrieving user auth tokens",
                  "Allow to setup password on test run",
                  "Updates tests and docs."
                ],
                "precision": "very-high",
                "repoDatasetSize": 179,
                "cwe": [
                  "CWE-798",
                  "CWE-259"
                ]
              }
            },
            {
              "id": "python/CommandInjection",
              "name": "CommandInjection",
              "shortDescription": {
                "text": "Command Injection"
              },
              "defaultConfiguration": {
                "level": "error"
              },
              "help": {
                "markdown": "## Details\n\nWith an OS command injection attack a web application user can pass commands directly to the system shell, attached to a legitimate request. These commands can then be executed on the application server, potentially leading to harmful consequences, including data exposure or deletion. Like code injection attacks, command injection attacks are essentially a failure of data validation. Unlike code injection attacks, which introduce new code, command injection attacks use existing system functions, often taking advantage of the application's unnecessarily high privilege level, increasing the risk of serious harm and reputational damage.\n\n### Best practices for prevention\n- Never trust user input. Assume any input may transmit harmful values.\n- Adopt the principle of least privilege: No application should have a greater access level than needed to run its required tasks.\n- Control user access policies on a task-by-task basis.\n- Don't pass user input directly to the system; use libraries or APIs that lack system access.\n- Where shell commands must be passed, escape values using functions like shlex for Python, or escapeshellarg() for PHP.\n- Sanitize user input with regular expressions to define permitted characters along with maximum string length.\n- Convert special characters such as `& |  ; $ > < \\ !` before passing to the server.\n- Whitelist permitted commands and validate user responses against these expectations.\n- Remember that code injection can take place on multiple fronts: GET and POST requests, but also cookies and HTTP headers.\n- Ensure up-to-date patching across all systems to remediate known vulnerabilities.\n- Educate all team members on safer data handling procedures to prevent attacks.",
                "text": ""
              },
              "properties": {
                "tags": [
                  "python"
                ],
                "categories": [
                  "Security"
                ],
                "exampleCommitFixes": [
                  {
                    "commitURL": "https://github.com/DustinBorn/avain/commit/4776439387645bced0e86e3766817de2562bf2eb?diff=split#diff-40f53a8850b6eb3209bd2d436d3ec5acL41",
                    "lines": [
                      {
                        "line": "# first download the data feed overview to retrieve URLs to all data feeds",
                        "lineNumber": 53,
                        "lineChange": "none"
                      },
                      {
                        "line": "try:",
                        "lineNumber": 54,
                        "lineChange": "none"
                      },
                      {
                        "line": "    nvd_response = requests.get(\"https://nvd.nist.gov/vuln/data-feeds\", timeout=20)",
                        "lineNumber": 55,
                        "lineChange": "none"
                      },
                      {
                        "line": "except:",
                        "lineNumber": 56,
                        "lineChange": "none"
                      },
                      {
                        "line": "communicate_warning(\"An error occured when trying to download webpage: https://nvd.nist.gov/vuln/data-feeds\")",
                        "lineNumber": 58,
                        "lineChange": "none"
                      },
                      {
                        "line": "# match the data feed URLs",
                        "lineNumber": 69,
                        "lineChange": "none"
                      },
                      {
                        "line": "nvd_nist_datafeed_html = nvd_response.text",
                        "lineNumber": 70,
                        "lineChange": "none"
                      },
                      {
                        "line": "jfeed_expr = re.compile(r\"https://nvd\\.nist\\.gov/feeds/json/cve/1\\.1/nvdcve-1\\.1-\\d\\d\\d\\d.json\\.zip\")",
                        "lineNumber": 71,
                        "lineChange": "none"
                      },
                      {
                        "line": "nvd_feed_urls = re.findall(jfeed_expr, nvd_nist_datafeed_html)",
                        "lineNumber": 72,
                        "lineChange": "none"
                      },
                      {
                        "line": "if not nvd_feed_urls:",
                        "lineNumber": 74,
                        "lineChange": "none"
                      },
                      {
                        "line": "with open(WGET_OUTFILE, \"w\") as file:",
                        "lineNumber": 82,
                        "lineChange": "none"
                      },
                      {
                        "line": "    zipfiles = []",
                        "lineNumber": 83,
                        "lineChange": "none"
                      },
                      {
                        "line": "    for nvd_feed_url in nvd_feed_urls:",
                        "lineNumber": 84,
                        "lineChange": "none"
                      },
                      {
                        "line": "        outname = os.path.join(NVD_DATAFEED_DIR, nvd_feed_url.split(\"/\")[-1])",
                        "lineNumber": 85,
                        "lineChange": "none"
                      },
                      {
                        "line": "        return_code = subprocess.call(\"wget %s -O %s\" % (nvd_feed_url, outname), stdout=file, stderr=subprocess.STDOUT, shell=True)",
                        "lineNumber": 65,
                        "lineChange": "removed"
                      },
                      {
                        "line": "        return_code = subprocess.call(\"wget %s -O %s\" % (shlex.quote(nvd_feed_url), shlex.quote(outname)),",
                        "lineNumber": 86,
                        "lineChange": "added"
                      },
                      {
                        "line": "                                      stdout=file, stderr=subprocess.STDOUT, shell=True)",
                        "lineNumber": 87,
                        "lineChange": "added"
                      },
                      {
                        "line": "        if return_code != 0:",
                        "lineNumber": 88,
                        "lineChange": "none"
                      },
                      {
                        "line": "            NVD_UPDATE_SUCCESS = False",
                        "lineNumber": 89,
                        "lineChange": "added"
                      },
                      {
                        "line": "            communicate_warning(\"Getting NVD data feed %s failed\" %  nvd_feed_url)",
                        "lineNumber": 90,
                        "lineChange": "none"
                      }
                    ]
                  },
                  {
                    "commitURL": "https://github.com/phase/o/commit/0f4bf9160b046e42f4cfad49585cc727b5213dc0?diff=split#diff-d689391370727e13cf640b0a56f5c1f0L32",
                    "lines": [
                      {
                        "line": "    compileO()",
                        "lineNumber": 29,
                        "lineChange": "none"
                      },
                      {
                        "line": "#Run code",
                        "lineNumber": 30,
                        "lineChange": "none"
                      },
                      {
                        "line": "code = request.form['code']",
                        "lineNumber": 31,
                        "lineChange": "none"
                      },
                      {
                        "line": "input = request.form['input'].replace('\\r\\n', '\\n')",
                        "lineNumber": 32,
                        "lineChange": "none"
                      },
                      {
                        "line": "print('Got code:', code, 'input:', input)",
                        "lineNumber": 33,
                        "lineChange": "none"
                      },
                      {
                        "line": "print('Running O code...')",
                        "lineNumber": 34,
                        "lineChange": "none"
                      },
                      {
                        "line": "p = Popen('./oide -e ' + code, stdout=PIPE, stderr=PIPE, stdin=PIPE, universal_newlines=True, shell=True)",
                        "lineNumber": 35,
                        "lineChange": "removed"
                      },
                      {
                        "line": "p = Popen(['./oide', '-e', code], stdout=PIPE, stderr=PIPE, stdin=PIPE, universal_newlines=True)",
                        "lineNumber": 35,
                        "lineChange": "added"
                      },
                      {
                        "line": "output, error = p.communicate(input)",
                        "lineNumber": 36,
                        "lineChange": "none"
                      },
                      {
                        "line": "#Output to IDE",
                        "lineNumber": 37,
                        "lineChange": "none"
                      }
                    ]
                  },
                  {
                    "commitURL": "https://github.com/fossasia/susi_linux/commit/cb0d01d811fcb53863847ce57f57e8cb6c83df6c?diff=split#diff-d1b551c102df7ccabbf2e58275781476L15",
                    "lines": [
                      {
                        "line": "    return 'starting the installation script'",
                        "lineNumber": 12,
                        "lineChange": "none"
                      },
                      {
                        "line": "@app.route('/config/<stt>/<tts>/<hotword>/<wake>')",
                        "lineNumber": 14,
                        "lineChange": "none"
                      },
                      {
                        "line": "def config(stt, tts, hotword, wake):",
                        "lineNumber": 15,
                        "lineChange": "none"
                      },
                      {
                        "line": "    os.system('sudo bash /home/pi/SUSI.AI/susi_linux/access_point/server/config.sh {} {} {} {}'.format(stt,tts,hotword,wake))  #nosec #pylint-disable type: ignore",
                        "lineNumber": 16,
                        "lineChange": "removed"
                      },
                      {
                        "line": "    subprocess.call(['sudo', 'bash' , 'server/config.sh', stt, tts, hotword, wake])  #nosec #pylint-disable type: ignore",
                        "lineNumber": 16,
                        "lineChange": "added"
                      },
                      {
                        "line": "    return 'Done' # pylint-enable",
                        "lineNumber": 17,
                        "lineChange": "none"
                      }
                    ]
                  }
                ],
                "exampleCommitDescriptions": [
                  "Tracking a local branch which in turn tracks a remote ref:",
                  "Python 3 support"
                ],
                "precision": "very-high",
                "repoDatasetSize": 128,
                "cwe": [
                  "CWE-78"
                ]
              }
            }
          ]
        }
      },
      "results": [
        {
          "ruleId": "python/InsecureXmlParser",
          "ruleIndex": 0,
          "level": "warning",
          "message": {
            "text": "xml.sax.make_parser is considered insecure. Use an analog from the defusedxml package.",
            "markdown": "{0} is considered insecure. Use an analog from the defusedxml package.",
            "arguments": [
              "[xml.sax.make_parser](0)"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "pygoat/introduction/views.py",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 203,
                  "endLine": 203,
                  "startColumn": 14,
                  "endColumn": 26
                }
              }
            }
          ],
          "fingerprints": {
            "0": "3dc0f8ad85e5ce5c649bc9970bb73acfa47cf06520191766a9f139cc7972f79a",
            "1": "92ec80ba.1c6650e9.aed90495.139c59a8.3b1cd495.57d888ee.f6dc7859.a8dee4ce.92ec80ba.1c6650e9.aed90495.139c59a8.3b1cd495.57d888ee.f6dc7859.a8dee4ce"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "pygoat/introduction/views.py",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 203,
                            "endLine": 203,
                            "startColumn": 14,
                            "endColumn": 26
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "priorityScore": 554,
            "priorityScoreFactors": [
              {
                "label": true,
                "type": "multipleOccurrence"
              },
              {
                "label": true,
                "type": "hotFileSource"
              },
              {
                "label": true,
                "type": "fixExamples"
              }
            ]
          }
        },
        {
          "ruleId": "python/InsecureXmlParser",
          "ruleIndex": 0,
          "level": "warning",
          "message": {
            "text": "xml.dom.pulldom.parseString is considered insecure. Use an analog from the defusedxml package.",
            "markdown": "{0} is considered insecure. Use an analog from the defusedxml package.",
            "arguments": [
              "[xml.dom.pulldom.parseString](0)"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "pygoat/introduction/views.py",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 205,
                  "endLine": 205,
                  "startColumn": 11,
                  "endColumn": 66
                }
              }
            }
          ],
          "fingerprints": {
            "0": "c6aab53c3baa57111f5def9c7b2c0a25dc2b6407b81d4e9fec343aebf6add4ee",
            "1": "24aebc95.771bb37c.79e62dc9.139c59a8.92f94df9.65be8dbb.f6dc7859.e6807754.24aebc95.771bb37c.79e62dc9.139c59a8.92f94df9.65be8dbb.f6dc7859.e6807754"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "pygoat/introduction/views.py",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 205,
                            "endLine": 205,
                            "startColumn": 11,
                            "endColumn": 66
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "priorityScore": 554,
            "priorityScoreFactors": [
              {
                "label": true,
                "type": "multipleOccurrence"
              },
              {
                "label": true,
                "type": "hotFileSource"
              },
              {
                "label": true,
                "type": "fixExamples"
              }
            ]
          }
        },
        {
          "ruleId": "python/SSRF",
          "ruleIndex": 1,
          "level": "warning",
          "message": {
            "text": "Unsanitized input from an HTTP parameter flows into requests.get, where it is used as an URL to perform a request. This may result in a Server Side Request Forgery vulnerability.",
            "markdown": "Unsanitized input from {0} {1} into {2}, where it is used as an URL to perform a request. This may result in a Server Side Request Forgery vulnerability.",
            "arguments": [
              "[an HTTP parameter](0)",
              "[flows](1),(2),(3),(4)",
              "[requests.get](5)"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "pygoat/introduction/views.py",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 888,
                  "endLine": 888,
                  "startColumn": 24,
                  "endColumn": 40
                }
              }
            }
          ],
          "fingerprints": {
            "0": "5fc549a852b934610a0b3c2885e25a7897b9b1772722a956f5b7ce4b157478b4",
            "1": "1f97d6e2.2da3d253.ef7ad415.139c59a8.f4f10911.786f7372.a2237efa.f46ed94e.1f97d6e2.2da3d253.1db99176.8ff59f5c.25ac000c.a5d7f69f.cc914b1e.f46ed94e"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "pygoat/introduction/views.py",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 886,
                            "endLine": 886,
                            "startColumn": 15,
                            "endColumn": 26
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 1,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "pygoat/introduction/views.py",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 886,
                            "endLine": 886,
                            "startColumn": 15,
                            "endColumn": 26
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 2,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "pygoat/introduction/views.py",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 886,
                            "endLine": 886,
                            "startColumn": 15,
                            "endColumn": 33
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 3,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "pygoat/introduction/views.py",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 886,
                            "endLine": 886,
                            "startColumn": 9,
                            "endColumn": 11
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 4,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "pygoat/introduction/views.py",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 888,
                            "endLine": 888,
                            "startColumn": 37,
                            "endColumn": 39
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 5,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "pygoat/introduction/views.py",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 888,
                            "endLine": 888,
                            "startColumn": 24,
                            "endColumn": 40
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "priorityScore": 552,
            "priorityScoreFactors": [
              {
                "label": true,
                "type": "hotFileSource"
              },
              {
                "label": true,
                "type": "fixExamples"
              }
            ]
          }
        },
        {
          "ruleId": "python/DisablesCSRFProtection",
          "ruleIndex": 2,
          "level": "warning",
          "message": {
            "text": "CSRF protection is disabled by django.views.decorators.csrf.csrf_exempt. This allows the attackers to execute requests on a user's behalf.",
            "markdown": "CSRF protection is disabled by {0}. This allows the attackers to execute requests on a user's behalf.",
            "arguments": [
              "[django.views.decorators.csrf.csrf_exempt](0)"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "pygoat/introduction/views.py",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 189,
                  "endLine": 197,
                  "startColumn": 1,
                  "endColumn": 32
                }
              }
            }
          ],
          "fingerprints": {
            "0": "cde199514b57bfc54e7b975e07a04b30c1945efbce3a113544eb50c6a9a293cc",
            "1": "68046466.5202f503.41ca5909.139c59a8.f0e2ba03.57d888ee.22a8b49e.c1d89dd1.68046466.5202f503.41ca5909.139c59a8.f0e2ba03.57d888ee.22a8b49e.c1d89dd1"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "pygoat/introduction/views.py",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 189,
                            "endLine": 189,
                            "startColumn": 2,
                            "endColumn": 12
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "priorityScore": 589,
            "priorityScoreFactors": [
              {
                "label": true,
                "type": "multipleOccurrence"
              },
              {
                "label": true,
                "type": "hotFileSource"
              },
              {
                "label": true,
                "type": "fixExamples"
              }
            ]
          }
        },
        {
          "ruleId": "python/DisablesCSRFProtection",
          "ruleIndex": 2,
          "level": "warning",
          "message": {
            "text": "CSRF protection is disabled by django.views.decorators.csrf.csrf_exempt. This allows the attackers to execute requests on a user's behalf.",
            "markdown": "CSRF protection is disabled by {0}. This allows the attackers to execute requests on a user's behalf.",
            "arguments": [
              "[django.views.decorators.csrf.csrf_exempt](0)"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "pygoat/introduction/views.py",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 200,
                  "endLine": 215,
                  "startColumn": 1,
                  "endColumn": 50
                }
              }
            }
          ],
          "fingerprints": {
            "0": "246898083e8a4fd39fd3d0c90ca2530fa8c0bae67055f71f5189071de494318f",
            "1": "68046466.5202f503.41ca5909.1e2c0147.f0e2ba03.ba14daf2.22a8b49e.a8dee4ce.68046466.5202f503.41ca5909.1e2c0147.f0e2ba03.ba14daf2.22a8b49e.a8dee4ce"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "pygoat/introduction/views.py",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 200,
                            "endLine": 200,
                            "startColumn": 2,
                            "endColumn": 12
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "priorityScore": 589,
            "priorityScoreFactors": [
              {
                "label": true,
                "type": "multipleOccurrence"
              },
              {
                "label": true,
                "type": "hotFileSource"
              },
              {
                "label": true,
                "type": "fixExamples"
              }
            ]
          }
        },
        {
          "ruleId": "python/DisablesCSRFProtection",
          "ruleIndex": 2,
          "level": "warning",
          "message": {
            "text": "CSRF protection is disabled by django.views.decorators.csrf.csrf_exempt. This allows the attackers to execute requests on a user's behalf.",
            "markdown": "CSRF protection is disabled by {0}. This allows the attackers to execute requests on a user's behalf.",
            "arguments": [
              "[django.views.decorators.csrf.csrf_exempt](0)"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "pygoat/introduction/views.py",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 280,
                  "endLine": 285,
                  "startColumn": 1,
                  "endColumn": 32
                }
              }
            }
          ],
          "fingerprints": {
            "0": "c57285b5124942ec4d0be066ec06fe3bdb4393fa966435bc82ef60e4a0750dc5",
            "1": "68046466.5202f503.41ca5909.139c59a8.f0e2ba03.57d888ee.22a8b49e.c1d89dd1.68046466.5202f503.41ca5909.139c59a8.f0e2ba03.57d888ee.22a8b49e.c1d89dd1"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "pygoat/introduction/views.py",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 280,
                            "endLine": 280,
                            "startColumn": 2,
                            "endColumn": 12
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "priorityScore": 589,
            "priorityScoreFactors": [
              {
                "label": true,
                "type": "multipleOccurrence"
              },
              {
                "label": true,
                "type": "hotFileSource"
              },
              {
                "label": true,
                "type": "fixExamples"
              }
            ]
          }
        },
        {
          "ruleId": "python/DisablesCSRFProtection",
          "ruleIndex": 2,
          "level": "warning",
          "message": {
            "text": "CSRF protection is disabled by django.views.decorators.csrf.csrf_exempt. This allows the attackers to execute requests on a user's behalf.",
            "markdown": "CSRF protection is disabled by {0}. This allows the attackers to execute requests on a user's behalf.",
            "arguments": [
              "[django.views.decorators.csrf.csrf_exempt](0)"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "pygoat/introduction/views.py",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 286,
                  "endLine": 326,
                  "startColumn": 1,
                  "endColumn": 32
                }
              }
            }
          ],
          "fingerprints": {
            "0": "fb352b5f5d9ecb36e3b1d3faec249ffc7b9ff7eb979565e4037808c2634c74af",
            "1": "68046466.5202f503.41ca5909.139c59a8.f0e2ba03.57d888ee.22a8b49e.c1d89dd1.68046466.5202f503.41ca5909.139c59a8.f0e2ba03.57d888ee.22a8b49e.c1d89dd1"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "pygoat/introduction/views.py",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 286,
                            "endLine": 286,
                            "startColumn": 2,
                            "endColumn": 12
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "priorityScore": 589,
            "priorityScoreFactors": [
              {
                "label": true,
                "type": "multipleOccurrence"
              },
              {
                "label": true,
                "type": "hotFileSource"
              },
              {
                "label": true,
                "type": "fixExamples"
              }
            ]
          }
        },
        {
          "ruleId": "python/DisablesCSRFProtection",
          "ruleIndex": 2,
          "level": "warning",
          "message": {
            "text": "CSRF protection is disabled by django.views.decorators.csrf.csrf_exempt. This allows the attackers to execute requests on a user's behalf.",
            "markdown": "CSRF protection is disabled by {0}. This allows the attackers to execute requests on a user's behalf.",
            "arguments": [
              "[django.views.decorators.csrf.csrf_exempt](0)"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "pygoat/introduction/views.py",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 359,
                  "endLine": 394,
                  "startColumn": 1,
                  "endColumn": 32
                }
              }
            }
          ],
          "fingerprints": {
            "0": "08273380e8ba6122018a2e69c59544ff14f45e35bc180766b2481087d7221182",
            "1": "68046466.5202f503.41ca5909.139c59a8.f0e2ba03.57d888ee.22a8b49e.c1d89dd1.68046466.5202f503.41ca5909.139c59a8.f0e2ba03.57d888ee.22a8b49e.c1d89dd1"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "pygoat/introduction/views.py",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 359,
                            "endLine": 359,
                            "startColumn": 2,
                            "endColumn": 12
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "priorityScore": 589,
            "priorityScoreFactors": [
              {
                "label": true,
                "type": "multipleOccurrence"
              },
              {
                "label": true,
                "type": "hotFileSource"
              },
              {
                "label": true,
                "type": "fixExamples"
              }
            ]
          }
        },
        {
          "ruleId": "python/DisablesCSRFProtection",
          "ruleIndex": 2,
          "level": "warning",
          "message": {
            "text": "CSRF protection is disabled by django.views.decorators.csrf.csrf_exempt. This allows the attackers to execute requests on a user's behalf.",
            "markdown": "CSRF protection is disabled by {0}. This allows the attackers to execute requests on a user's behalf.",
            "arguments": [
              "[django.views.decorators.csrf.csrf_exempt](0)"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "pygoat/introduction/views.py",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 417,
                  "endLine": 443,
                  "startColumn": 1,
                  "endColumn": 100
                }
              }
            }
          ],
          "fingerprints": {
            "0": "7f63f282dd27051520c5e5b9f949841247a5110b98e4a21c54a8b479941bbb71",
            "1": "68046466.5202f503.41ca5909.1e2c0147.f0e2ba03.a5d7f69f.22a8b49e.c1d89dd1.68046466.5202f503.41ca5909.1e2c0147.f0e2ba03.a5d7f69f.22a8b49e.c1d89dd1"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "pygoat/introduction/views.py",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 417,
                            "endLine": 417,
                            "startColumn": 2,
                            "endColumn": 12
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "priorityScore": 589,
            "priorityScoreFactors": [
              {
                "label": true,
                "type": "multipleOccurrence"
              },
              {
                "label": true,
                "type": "hotFileSource"
              },
              {
                "label": true,
                "type": "fixExamples"
              }
            ]
          }
        },
        {
          "ruleId": "python/DisablesCSRFProtection",
          "ruleIndex": 2,
          "level": "warning",
          "message": {
            "text": "CSRF protection is disabled by django.views.decorators.csrf.csrf_exempt. This allows the attackers to execute requests on a user's behalf.",
            "markdown": "CSRF protection is disabled by {0}. This allows the attackers to execute requests on a user's behalf.",
            "arguments": [
              "[django.views.decorators.csrf.csrf_exempt](0)"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "pygoat/introduction/views.py",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 475,
                  "endLine": 494,
                  "startColumn": 1,
                  "endColumn": 32
                }
              }
            }
          ],
          "fingerprints": {
            "0": "80215f7c310b579b2b2441eb03fda7df816b0e7807d558d120a5a2c1a6a57924",
            "1": "68046466.5202f503.41ca5909.139c59a8.f0e2ba03.57d888ee.22a8b49e.c1d89dd1.68046466.5202f503.41ca5909.139c59a8.f0e2ba03.57d888ee.22a8b49e.c1d89dd1"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "pygoat/introduction/views.py",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 475,
                            "endLine": 475,
                            "startColumn": 2,
                            "endColumn": 12
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "priorityScore": 589,
            "priorityScoreFactors": [
              {
                "label": true,
                "type": "multipleOccurrence"
              },
              {
                "label": true,
                "type": "hotFileSource"
              },
              {
                "label": true,
                "type": "fixExamples"
              }
            ]
          }
        },
        {
          "ruleId": "python/DisablesCSRFProtection",
          "ruleIndex": 2,
          "level": "warning",
          "message": {
            "text": "CSRF protection is disabled by django.views.decorators.csrf.csrf_exempt. This allows the attackers to execute requests on a user's behalf.",
            "markdown": "CSRF protection is disabled by {0}. This allows the attackers to execute requests on a user's behalf.",
            "arguments": [
              "[django.views.decorators.csrf.csrf_exempt](0)"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "pygoat/introduction/views.py",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 498,
                  "endLine": 530,
                  "startColumn": 1,
                  "endColumn": 104
                }
              }
            }
          ],
          "fingerprints": {
            "0": "1507bf05b3fb3f423f2d77da1c119085b2b8213bf01555a57b6644855cff8cf9",
            "1": "68046466.5202f503.41ca5909.1e2c0147.f0e2ba03.a5d7f69f.22a8b49e.c1d89dd1.68046466.5202f503.41ca5909.1e2c0147.f0e2ba03.a5d7f69f.22a8b49e.c1d89dd1"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "pygoat/introduction/views.py",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 498,
                            "endLine": 498,
                            "startColumn": 2,
                            "endColumn": 12
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "priorityScore": 589,
            "priorityScoreFactors": [
              {
                "label": true,
                "type": "multipleOccurrence"
              },
              {
                "label": true,
                "type": "hotFileSource"
              },
              {
                "label": true,
                "type": "fixExamples"
              }
            ]
          }
        },
        {
          "ruleId": "python/DisablesCSRFProtection",
          "ruleIndex": 2,
          "level": "warning",
          "message": {
            "text": "CSRF protection is disabled by django.views.decorators.csrf.csrf_exempt. This allows the attackers to execute requests on a user's behalf.",
            "markdown": "CSRF protection is disabled by {0}. This allows the attackers to execute requests on a user's behalf.",
            "arguments": [
              "[django.views.decorators.csrf.csrf_exempt](0)"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "pygoat/introduction/views.py",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 663,
                  "endLine": 668,
                  "startColumn": 1,
                  "endColumn": 79
                }
              }
            }
          ],
          "fingerprints": {
            "0": "da40d48b6ac311f43400762316a8755a0a6936a98b5bc84a3dc4889fa17d90d9",
            "1": "68046466.5202f503.41ca5909.1e2c0147.f0e2ba03.ba14daf2.22a8b49e.c1d89dd1.68046466.5202f503.41ca5909.1e2c0147.f0e2ba03.ba14daf2.22a8b49e.c1d89dd1"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "pygoat/introduction/views.py",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 663,
                            "endLine": 663,
                            "startColumn": 2,
                            "endColumn": 12
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "priorityScore": 589,
            "priorityScoreFactors": [
              {
                "label": true,
                "type": "multipleOccurrence"
              },
              {
                "label": true,
                "type": "hotFileSource"
              },
              {
                "label": true,
                "type": "fixExamples"
              }
            ]
          }
        },
        {
          "ruleId": "python/DisablesCSRFProtection",
          "ruleIndex": 2,
          "level": "warning",
          "message": {
            "text": "CSRF protection is disabled by django.views.decorators.csrf.csrf_exempt. This allows the attackers to execute requests on a user's behalf.",
            "markdown": "CSRF protection is disabled by {0}. This allows the attackers to execute requests on a user's behalf.",
            "arguments": [
              "[django.views.decorators.csrf.csrf_exempt](0)"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "pygoat/introduction/views.py",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 671,
                  "endLine": 705,
                  "startColumn": 1,
                  "endColumn": 107
                }
              }
            }
          ],
          "fingerprints": {
            "0": "4ac3b275d469d366ce57fd999e96fcddbb009b16b8a5f95f86b60fee2dd4e8cc",
            "1": "68046466.5202f503.41ca5909.139c59a8.f0e2ba03.ba14daf2.22a8b49e.c1d89dd1.68046466.5202f503.41ca5909.139c59a8.f0e2ba03.ba14daf2.22a8b49e.c1d89dd1"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "pygoat/introduction/views.py",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 671,
                            "endLine": 671,
                            "startColumn": 2,
                            "endColumn": 12
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "priorityScore": 589,
            "priorityScoreFactors": [
              {
                "label": true,
                "type": "multipleOccurrence"
              },
              {
                "label": true,
                "type": "hotFileSource"
              },
              {
                "label": true,
                "type": "fixExamples"
              }
            ]
          }
        },
        {
          "ruleId": "python/DisablesCSRFProtection",
          "ruleIndex": 2,
          "level": "warning",
          "message": {
            "text": "CSRF protection is disabled by django.views.decorators.csrf.csrf_exempt. This allows the attackers to execute requests on a user's behalf.",
            "markdown": "CSRF protection is disabled by {0}. This allows the attackers to execute requests on a user's behalf.",
            "arguments": [
              "[django.views.decorators.csrf.csrf_exempt](0)"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "pygoat/introduction/views.py",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 707,
                  "endLine": 745,
                  "startColumn": 1,
                  "endColumn": 107
                }
              }
            }
          ],
          "fingerprints": {
            "0": "f75aeb101341434a571132f9d2f52374d3da4dd1093f9bf953de3a7975bc3b68",
            "1": "68046466.5202f503.41ca5909.139c59a8.f0e2ba03.ba14daf2.22a8b49e.c1d89dd1.68046466.5202f503.41ca5909.139c59a8.f0e2ba03.ba14daf2.22a8b49e.c1d89dd1"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "pygoat/introduction/views.py",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 707,
                            "endLine": 707,
                            "startColumn": 2,
                            "endColumn": 12
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "priorityScore": 589,
            "priorityScoreFactors": [
              {
                "label": true,
                "type": "multipleOccurrence"
              },
              {
                "label": true,
                "type": "hotFileSource"
              },
              {
                "label": true,
                "type": "fixExamples"
              }
            ]
          }
        },
        {
          "ruleId": "python/DisablesCSRFProtection",
          "ruleIndex": 2,
          "level": "warning",
          "message": {
            "text": "CSRF protection is disabled by django.views.decorators.csrf.csrf_exempt. This allows the attackers to execute requests on a user's behalf.",
            "markdown": "CSRF protection is disabled by {0}. This allows the attackers to execute requests on a user's behalf.",
            "arguments": [
              "[django.views.decorators.csrf.csrf_exempt](0)"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "pygoat/introduction/views.py",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 771,
                  "endLine": 776,
                  "startColumn": 1,
                  "endColumn": 65
                }
              }
            }
          ],
          "fingerprints": {
            "0": "501917b77697e5fc8ec7b3d4b750b62b9abdd02fca6ceb70feccf8f85ebbf762",
            "1": "68046466.5202f503.41ca5909.8448edce.f0e2ba03.ba14daf2.22a8b49e.c1d89dd1.68046466.5202f503.41ca5909.8448edce.f0e2ba03.ba14daf2.22a8b49e.c1d89dd1"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "pygoat/introduction/views.py",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 771,
                            "endLine": 771,
                            "startColumn": 2,
                            "endColumn": 12
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "priorityScore": 589,
            "priorityScoreFactors": [
              {
                "label": true,
                "type": "multipleOccurrence"
              },
              {
                "label": true,
                "type": "hotFileSource"
              },
              {
                "label": true,
                "type": "fixExamples"
              }
            ]
          }
        },
        {
          "ruleId": "python/DisablesCSRFProtection",
          "ruleIndex": 2,
          "level": "warning",
          "message": {
            "text": "CSRF protection is disabled by django.views.decorators.csrf.csrf_exempt. This allows the attackers to execute requests on a user's behalf.",
            "markdown": "CSRF protection is disabled by {0}. This allows the attackers to execute requests on a user's behalf.",
            "arguments": [
              "[django.views.decorators.csrf.csrf_exempt](0)"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "pygoat/introduction/views.py",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 779,
                  "endLine": 829,
                  "startColumn": 1,
                  "endColumn": 32
                }
              }
            }
          ],
          "fingerprints": {
            "0": "e8122b3754d75188f7a4b7e329e224f8a853d05b5754197951b50b698c34c487",
            "1": "101290c2.5202f503.41ca5909.139c59a8.f0e2ba03.57d888ee.22a8b49e.c1d89dd1.101290c2.5202f503.41ca5909.139c59a8.f0e2ba03.57d888ee.22a8b49e.c1d89dd1"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "pygoat/introduction/views.py",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 779,
                            "endLine": 779,
                            "startColumn": 2,
                            "endColumn": 12
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "priorityScore": 589,
            "priorityScoreFactors": [
              {
                "label": true,
                "type": "multipleOccurrence"
              },
              {
                "label": true,
                "type": "hotFileSource"
              },
              {
                "label": true,
                "type": "fixExamples"
              }
            ]
          }
        },
        {
          "ruleId": "python/DisablesCSRFProtection",
          "ruleIndex": 2,
          "level": "warning",
          "message": {
            "text": "CSRF protection is disabled by django.views.decorators.csrf.csrf_exempt. This allows the attackers to execute requests on a user's behalf.",
            "markdown": "CSRF protection is disabled by {0}. This allows the attackers to execute requests on a user's behalf.",
            "arguments": [
              "[django.views.decorators.csrf.csrf_exempt](0)"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "pygoat/introduction/views.py",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 1101,
                  "endLine": 1129,
                  "startColumn": 1,
                  "endColumn": 27
                }
              }
            }
          ],
          "fingerprints": {
            "0": "f7ff175293f588d186d9e03554be7b997f6393253b25dbcb1fb9c9fe3d81f9c7",
            "1": "68046466.5202f503.41ca5909.1e2c0147.f0e2ba03.a5d7f69f.22a8b49e.c1d89dd1.68046466.5202f503.41ca5909.1e2c0147.f0e2ba03.a5d7f69f.22a8b49e.c1d89dd1"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "pygoat/introduction/views.py",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 1102,
                            "endLine": 1102,
                            "startColumn": 2,
                            "endColumn": 12
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "priorityScore": 589,
            "priorityScoreFactors": [
              {
                "label": true,
                "type": "multipleOccurrence"
              },
              {
                "label": true,
                "type": "hotFileSource"
              },
              {
                "label": true,
                "type": "fixExamples"
              }
            ]
          }
        },
        {
          "ruleId": "python/DisablesCSRFProtection",
          "ruleIndex": 2,
          "level": "warning",
          "message": {
            "text": "CSRF protection is disabled by django.views.decorators.csrf.csrf_exempt. This allows the attackers to execute requests on a user's behalf.",
            "markdown": "CSRF protection is disabled by {0}. This allows the attackers to execute requests on a user's behalf.",
            "arguments": [
              "[django.views.decorators.csrf.csrf_exempt](0)"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "pygoat/introduction/apis.py",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 17,
                  "endLine": 49,
                  "startColumn": 1,
                  "endColumn": 76
                }
              }
            }
          ],
          "fingerprints": {
            "0": "f297094c94139533786a588ef006c430dd0d419225eb844ded19a5dc600893c4",
            "1": "63ecb6a3.5202f503.41ca5909.139c59a8.f0e2ba03.3fed62ab.22a8b49e.c1d89dd1.63ecb6a3.5202f503.41ca5909.139c59a8.f0e2ba03.3fed62ab.22a8b49e.c1d89dd1"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "pygoat/introduction/apis.py",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 17,
                            "endLine": 17,
                            "startColumn": 2,
                            "endColumn": 12
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "priorityScore": 589,
            "priorityScoreFactors": [
              {
                "label": true,
                "type": "multipleOccurrence"
              },
              {
                "label": true,
                "type": "hotFileSource"
              },
              {
                "label": true,
                "type": "fixExamples"
              }
            ]
          }
        },
        {
          "ruleId": "python/DisablesCSRFProtection",
          "ruleIndex": 2,
          "level": "warning",
          "message": {
            "text": "CSRF protection is disabled by django.views.decorators.csrf.csrf_exempt. This allows the attackers to execute requests on a user's behalf.",
            "markdown": "CSRF protection is disabled by {0}. This allows the attackers to execute requests on a user's behalf.",
            "arguments": [
              "[django.views.decorators.csrf.csrf_exempt](0)"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "pygoat/introduction/apis.py",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 54,
                  "endLine": 85,
                  "startColumn": 1,
                  "endColumn": 74
                }
              }
            }
          ],
          "fingerprints": {
            "0": "10ecbeb9082f25e8b8c294656fb83d630bb29ad1972d6e50b212aa69404c53cc",
            "1": "63ecb6a3.5202f503.41ca5909.1e2c0147.f0e2ba03.a5d7f69f.22a8b49e.c1d89dd1.63ecb6a3.5202f503.41ca5909.1e2c0147.f0e2ba03.a5d7f69f.22a8b49e.c1d89dd1"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "pygoat/introduction/apis.py",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 54,
                            "endLine": 54,
                            "startColumn": 2,
                            "endColumn": 12
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "priorityScore": 589,
            "priorityScoreFactors": [
              {
                "label": true,
                "type": "multipleOccurrence"
              },
              {
                "label": true,
                "type": "hotFileSource"
              },
              {
                "label": true,
                "type": "fixExamples"
              }
            ]
          }
        },
        {
          "ruleId": "python/DisablesCSRFProtection",
          "ruleIndex": 2,
          "level": "warning",
          "message": {
            "text": "CSRF protection is disabled by django.views.decorators.csrf.csrf_exempt. This allows the attackers to execute requests on a user's behalf.",
            "markdown": "CSRF protection is disabled by {0}. This allows the attackers to execute requests on a user's behalf.",
            "arguments": [
              "[django.views.decorators.csrf.csrf_exempt](0)"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "pygoat/introduction/apis.py",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 88,
                  "endLine": 104,
                  "startColumn": 1,
                  "endColumn": 59
                }
              }
            }
          ],
          "fingerprints": {
            "0": "7650d2c09a1d4ac660229c6fe3d876bfa2b817ed924e73e2b72fbdfc24141d23",
            "1": "63ecb6a3.5202f503.41ca5909.1e2c0147.f0e2ba03.37ff44c3.22a8b49e.c1d89dd1.63ecb6a3.5202f503.41ca5909.1e2c0147.f0e2ba03.37ff44c3.22a8b49e.c1d89dd1"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "pygoat/introduction/apis.py",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 88,
                            "endLine": 88,
                            "startColumn": 2,
                            "endColumn": 12
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "priorityScore": 589,
            "priorityScoreFactors": [
              {
                "label": true,
                "type": "multipleOccurrence"
              },
              {
                "label": true,
                "type": "hotFileSource"
              },
              {
                "label": true,
                "type": "fixExamples"
              }
            ]
          }
        },
        {
          "ruleId": "python/DisablesCSRFProtection",
          "ruleIndex": 2,
          "level": "warning",
          "message": {
            "text": "CSRF protection is disabled by django.views.decorators.csrf.csrf_exempt. This allows the attackers to execute requests on a user's behalf.",
            "markdown": "CSRF protection is disabled by {0}. This allows the attackers to execute requests on a user's behalf.",
            "arguments": [
              "[django.views.decorators.csrf.csrf_exempt](0)"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "pygoat/introduction/apis.py",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 107,
                  "endLine": 118,
                  "startColumn": 1,
                  "endColumn": 63
                }
              }
            }
          ],
          "fingerprints": {
            "0": "d59f7244bc2e032cbd7d86a4f5bc1dfa2fbf775ea699f69eb6419a8afd2e8b05",
            "1": "e06468b8.5202f503.41ca5909.1e2c0147.f0e2ba03.37ff44c3.22a8b49e.c1d89dd1.e06468b8.5202f503.41ca5909.1e2c0147.f0e2ba03.37ff44c3.22a8b49e.c1d89dd1"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "pygoat/introduction/apis.py",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 107,
                            "endLine": 107,
                            "startColumn": 2,
                            "endColumn": 12
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "priorityScore": 589,
            "priorityScoreFactors": [
              {
                "label": true,
                "type": "multipleOccurrence"
              },
              {
                "label": true,
                "type": "hotFileSource"
              },
              {
                "label": true,
                "type": "fixExamples"
              }
            ]
          }
        },
        {
          "ruleId": "python/DisablesCSRFProtection",
          "ruleIndex": 2,
          "level": "warning",
          "message": {
            "text": "CSRF protection is disabled by django.views.decorators.csrf.csrf_exempt. This allows the attackers to execute requests on a user's behalf.",
            "markdown": "CSRF protection is disabled by {0}. This allows the attackers to execute requests on a user's behalf.",
            "arguments": [
              "[django.views.decorators.csrf.csrf_exempt](0)"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "pygoat/introduction/apis.py",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 120,
                  "endLine": 133,
                  "startColumn": 1,
                  "endColumn": 59
                }
              }
            }
          ],
          "fingerprints": {
            "0": "8f08b5d6910bec76c20f7bc9bd0b6e155f00c5ae0ff464870d46a9e942070200",
            "1": "63ecb6a3.5202f503.41ca5909.1e2c0147.f0e2ba03.37ff44c3.22a8b49e.c1d89dd1.63ecb6a3.5202f503.41ca5909.1e2c0147.f0e2ba03.37ff44c3.22a8b49e.c1d89dd1"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "pygoat/introduction/apis.py",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 120,
                            "endLine": 120,
                            "startColumn": 2,
                            "endColumn": 12
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "priorityScore": 589,
            "priorityScoreFactors": [
              {
                "label": true,
                "type": "multipleOccurrence"
              },
              {
                "label": true,
                "type": "hotFileSource"
              },
              {
                "label": true,
                "type": "fixExamples"
              }
            ]
          }
        },
        {
          "ruleId": "python/DisablesCSRFProtection",
          "ruleIndex": 2,
          "level": "warning",
          "message": {
            "text": "CSRF protection is disabled by django.views.decorators.csrf.csrf_exempt. This allows the attackers to execute requests on a user's behalf.",
            "markdown": "CSRF protection is disabled by {0}. This allows the attackers to execute requests on a user's behalf.",
            "arguments": [
              "[django.views.decorators.csrf.csrf_exempt](0)"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "pygoat/introduction/playground/A9/archive.py",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 5,
                  "endLine": 31,
                  "startColumn": 1,
                  "endColumn": 70
                }
              }
            }
          ],
          "fingerprints": {
            "0": "8b591ca2d4ce8f16edd961ff6ed1716b38e7a4e03882130231edf4510cc041dd",
            "1": "63ecb6a3.5202f503.41ca5909.1e2c0147.c2f53157.a5d7f69f.22a8b49e.e515d470.63ecb6a3.5202f503.41ca5909.1e2c0147.c2f53157.a5d7f69f.22a8b49e.e515d470"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "pygoat/introduction/playground/A9/archive.py",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 5,
                            "endLine": 5,
                            "startColumn": 2,
                            "endColumn": 12
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "priorityScore": 589,
            "priorityScoreFactors": [
              {
                "label": true,
                "type": "multipleOccurrence"
              },
              {
                "label": true,
                "type": "hotFileSource"
              },
              {
                "label": true,
                "type": "fixExamples"
              }
            ]
          }
        },
        {
          "ruleId": "python/DisablesCSRFProtection",
          "ruleIndex": 2,
          "level": "warning",
          "message": {
            "text": "CSRF protection is disabled by django.views.decorators.csrf.csrf_exempt. This allows the attackers to execute requests on a user's behalf.",
            "markdown": "CSRF protection is disabled by {0}. This allows the attackers to execute requests on a user's behalf.",
            "arguments": [
              "[django.views.decorators.csrf.csrf_exempt](0)"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "pygoat/introduction/playground/A9/api.py",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 5,
                  "endLine": 31,
                  "startColumn": 1,
                  "endColumn": 70
                }
              }
            }
          ],
          "fingerprints": {
            "0": "4522396834228a5fed5ae27fc7e9b5bafc9c45c65f78399045456996a6e9fcdc",
            "1": "63ecb6a3.5202f503.41ca5909.1e2c0147.c2f53157.a5d7f69f.22a8b49e.e515d470.63ecb6a3.5202f503.41ca5909.1e2c0147.c2f53157.a5d7f69f.22a8b49e.e515d470"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "pygoat/introduction/playground/A9/api.py",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 5,
                            "endLine": 5,
                            "startColumn": 2,
                            "endColumn": 12
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "priorityScore": 589,
            "priorityScoreFactors": [
              {
                "label": true,
                "type": "multipleOccurrence"
              },
              {
                "label": true,
                "type": "hotFileSource"
              },
              {
                "label": true,
                "type": "fixExamples"
              }
            ]
          }
        },
        {
          "ruleId": "javascript/DOMXSS",
          "ruleIndex": 3,
          "level": "error",
          "message": {
            "text": "Unsanitized input from data from a remote resource flows into innerHTML, where it is used to dynamically construct the HTML page on client side. This may result in a DOM Based Cross-Site Scripting attack (DOMXSS).",
            "markdown": "Unsanitized input from {0} {1} into {2}, where it is used to dynamically construct the HTML page on client side. This may result in a DOM Based Cross-Site Scripting attack (DOMXSS).",
            "arguments": [
              "[data from a remote resource](0)",
              "[flows](1),(2),(3),(4),(5),(6),(7),(8),(9),(10),(11),(12),(13)",
              "[innerHTML](14)"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "pygoat/introduction/static/js/a9.js",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 40,
                  "endLine": 40,
                  "startColumn": 28,
                  "endColumn": 39
                }
              }
            }
          ],
          "fingerprints": {
            "0": "d6571ff744d4ac59cf65cf3e22a43c0b98bf7c1e2f855c791acec8d2996f4743",
            "1": "2d06e3d6.67a80300.6d3433f3.6483b32f.88c0ffa1.dbe83c7e.e4b04163.545e9171.4c529f3e.7d4b7307.aff85a25.c559ebce.f5e34a73.dbe83c7e.e4b04163.e6930396"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "pygoat/introduction/static/js/a9.js",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 32,
                            "endLine": 32,
                            "startColumn": 5,
                            "endColumn": 52
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 1,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "pygoat/introduction/static/js/a9.js",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 32,
                            "endLine": 32,
                            "startColumn": 5,
                            "endColumn": 52
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 2,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "pygoat/introduction/static/js/a9.js",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 33,
                            "endLine": 33,
                            "startColumn": 11,
                            "endColumn": 18
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 3,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "pygoat/introduction/static/js/a9.js",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 33,
                            "endLine": 33,
                            "startColumn": 23,
                            "endColumn": 30
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 4,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "pygoat/introduction/static/js/a9.js",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 33,
                            "endLine": 33,
                            "startColumn": 23,
                            "endColumn": 35
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 5,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "pygoat/introduction/static/js/a9.js",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 33,
                            "endLine": 33,
                            "startColumn": 23,
                            "endColumn": 37
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 6,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "pygoat/introduction/static/js/a9.js",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 34,
                            "endLine": 34,
                            "startColumn": 11,
                            "endColumn": 16
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 7,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "pygoat/introduction/static/js/a9.js",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 35,
                            "endLine": 35,
                            "startColumn": 31,
                            "endColumn": 36
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 8,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "pygoat/introduction/static/js/a9.js",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 35,
                            "endLine": 35,
                            "startColumn": 20,
                            "endColumn": 29
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 9,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "pygoat/introduction/static/js/a9.js",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 35,
                            "endLine": 35,
                            "startColumn": 13,
                            "endColumn": 16
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 10,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "pygoat/introduction/static/js/a9.js",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 36,
                            "endLine": 36,
                            "startColumn": 21,
                            "endColumn": 24
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 11,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "pygoat/introduction/static/js/a9.js",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 38,
                            "endLine": 38,
                            "startColumn": 29,
                            "endColumn": 37
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 12,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "pygoat/introduction/static/js/a9.js",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 40,
                            "endLine": 40,
                            "startColumn": 28,
                            "endColumn": 36
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 13,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "pygoat/introduction/static/js/a9.js",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 40,
                            "endLine": 40,
                            "startColumn": 28,
                            "endColumn": 39
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 14,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "pygoat/introduction/static/js/a9.js",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 40,
                            "endLine": 40,
                            "startColumn": 28,
                            "endColumn": 39
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "priorityScore": 852,
            "priorityScoreFactors": [
              {
                "label": true,
                "type": "hotFileCodeFlow"
              },
              {
                "label": true,
                "type": "fixExamples"
              },
              {
                "label": true,
                "type": "commonlyFixed"
              }
            ]
          }
        },
        {
          "ruleId": "python/insecureHash",
          "ruleIndex": 4,
          "level": "warning",
          "message": {
            "text": "hashlib.md5 is insecure. Consider changing it to a secure hashing algorithm (e.g. SHA256).",
            "markdown": "{0} is insecure. Consider changing it to a secure hashing algorithm (e.g. SHA256).",
            "arguments": [
              "[hashlib.md5](0)"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "pygoat/introduction/views.py",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 951,
                  "endLine": 951,
                  "startColumn": 28,
                  "endColumn": 49
                }
              }
            }
          ],
          "fingerprints": {
            "0": "09e8c16b8899fad17210fb7a3865a31ac7774ce32b322e91adfe6db7df0d84dd",
            "1": "97da360b.bbecba98.f04405c4.139c59a8.bab9de6f.ba14daf2.081ac3f4.8356f9c3.97da360b.bbecba98.f04405c4.139c59a8.bab9de6f.ba14daf2.081ac3f4.8356f9c3"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "pygoat/introduction/views.py",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 951,
                            "endLine": 951,
                            "startColumn": 28,
                            "endColumn": 49
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "priorityScore": 552,
            "priorityScoreFactors": [
              {
                "label": true,
                "type": "hotFileSource"
              },
              {
                "label": true,
                "type": "fixExamples"
              }
            ]
          }
        },
        {
          "ruleId": "python/Deserialization",
          "ruleIndex": 5,
          "level": "error",
          "message": {
            "text": "Unsanitized input from cookies flows into pickle.loads, where it is used to deserialize an object. This may result in an Unsafe Deserialization vulnerability.",
            "markdown": "Unsanitized input from {0} {1} into {2}, where it is used to deserialize an object. This may result in an Unsafe Deserialization vulnerability.",
            "arguments": [
              "[cookies](0)",
              "[flows](1),(2),(3),(4),(5),(6),(7),(8)",
              "[pickle.loads](9)"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "pygoat/introduction/views.py",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 164,
                  "endLine": 164,
                  "startColumn": 21,
                  "endColumn": 39
                }
              }
            }
          ],
          "fingerprints": {
            "0": "9c5ac70568124aaf957a18d3b888da0586797d709a5dd54d8d2a3e5da2dcab03",
            "1": "97bd3f73.d3fa0bdc.a832003e.1cad2231.bc69278a.ba14daf2.081ac3f4.11d3d0f5.97bd3f73.d3fa0bdc.a832003e.1cad2231.a7fc4965.a5d7f69f.cf308c7a.06cbc1ee"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "pygoat/introduction/views.py",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 158,
                            "endLine": 158,
                            "startColumn": 17,
                            "endColumn": 31
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 1,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "pygoat/introduction/views.py",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 158,
                            "endLine": 158,
                            "startColumn": 17,
                            "endColumn": 31
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 2,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "pygoat/introduction/views.py",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 158,
                            "endLine": 158,
                            "startColumn": 17,
                            "endColumn": 35
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 3,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "pygoat/introduction/views.py",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 158,
                            "endLine": 158,
                            "startColumn": 9,
                            "endColumn": 13
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 4,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "pygoat/introduction/views.py",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 159,
                            "endLine": 159,
                            "startColumn": 12,
                            "endColumn": 16
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 5,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "pygoat/introduction/views.py",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 163,
                            "endLine": 163,
                            "startColumn": 38,
                            "endColumn": 42
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 6,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "pygoat/introduction/views.py",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 163,
                            "endLine": 163,
                            "startColumn": 21,
                            "endColumn": 43
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 7,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "pygoat/introduction/views.py",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 163,
                            "endLine": 163,
                            "startColumn": 13,
                            "endColumn": 17
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 8,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "pygoat/introduction/views.py",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 164,
                            "endLine": 164,
                            "startColumn": 34,
                            "endColumn": 38
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 9,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "pygoat/introduction/views.py",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 164,
                            "endLine": 164,
                            "startColumn": 21,
                            "endColumn": 39
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "priorityScore": 804,
            "priorityScoreFactors": [
              {
                "label": true,
                "type": "multipleOccurrence"
              },
              {
                "label": true,
                "type": "hotFileSource"
              },
              {
                "label": true,
                "type": "fixExamples"
              }
            ]
          }
        },
        {
          "ruleId": "python/Deserialization",
          "ruleIndex": 5,
          "level": "error",
          "message": {
            "text": "Unsanitized input from an uploaded file flows into yaml.load, where it is used to deserialize an object. This may result in an Unsafe Deserialization vulnerability.",
            "markdown": "Unsanitized input from {0} {1} into {2}, where it is used to deserialize an object. This may result in an Unsafe Deserialization vulnerability.",
            "arguments": [
              "[an uploaded file](0)",
              "[flows](1),(2),(3),(4)",
              "[yaml.load](5)"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "pygoat/introduction/views.py",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 485,
                  "endLine": 485,
                  "startColumn": 28,
                  "endColumn": 54
                }
              }
            }
          ],
          "fingerprints": {
            "0": "fab92b593b3e65af8cf5081cbf11a5e0d90e6c5ea9032736a71f4352d4468bda",
            "1": "a6b41d6e.d65c0e39.b10b935c.5bc6639a.de0eb731.ba14daf2.a2237efa.f46ed94e.7e401efd.d65c0e39.1db99176.8ff59f5c.1d07cee4.fb8be710.cf308c7a.f46ed94e"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "pygoat/introduction/views.py",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 483,
                            "endLine": 483,
                            "startColumn": 22,
                            "endColumn": 34
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 1,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "pygoat/introduction/views.py",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 483,
                            "endLine": 483,
                            "startColumn": 22,
                            "endColumn": 34
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 2,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "pygoat/introduction/views.py",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 483,
                            "endLine": 483,
                            "startColumn": 22,
                            "endColumn": 42
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 3,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "pygoat/introduction/views.py",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 483,
                            "endLine": 483,
                            "startColumn": 17,
                            "endColumn": 20
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 4,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "pygoat/introduction/views.py",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 485,
                            "endLine": 485,
                            "startColumn": 38,
                            "endColumn": 41
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 5,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "pygoat/introduction/views.py",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 485,
                            "endLine": 485,
                            "startColumn": 28,
                            "endColumn": 54
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "priorityScore": 804,
            "priorityScoreFactors": [
              {
                "label": true,
                "type": "multipleOccurrence"
              },
              {
                "label": true,
                "type": "hotFileSource"
              },
              {
                "label": true,
                "type": "fixExamples"
              }
            ]
          }
        },
        {
          "ruleId": "python/WebCookieWithSecureFalse",
          "ruleIndex": 6,
          "level": "error",
          "message": {
            "text": "The cookie's Secure flag is set to False. Set it to true to protect the cookie from man-in-the-middle attacks.",
            "markdown": "The cookie's Secure flag is set to {0}. Set it to true to protect the cookie from man-in-the-middle attacks.",
            "arguments": [
              "[False](0)"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "pygoat/introduction/views.py",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 236,
                  "endLine": 236,
                  "startColumn": 99,
                  "endColumn": 103
                }
              }
            }
          ],
          "fingerprints": {
            "0": "5c6e32ca91806149e5adba385d4145345218a5fbe7a39799080d2502c1050e5b",
            "1": "d49f7e61.2da3d253.2683ade8.139c59a8.f4f10911.786f7372.cbfa2b68.ebed174f.8a30cfc6.2da3d253.79e62dc9.139c59a8.f4f10911.3e909653.cbfa2b68.d5c196e5"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "pygoat/introduction/views.py",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 236,
                            "endLine": 236,
                            "startColumn": 99,
                            "endColumn": 103
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "priorityScore": 806,
            "priorityScoreFactors": [
              {
                "label": true,
                "type": "multipleOccurrence"
              },
              {
                "label": true,
                "type": "hotFileSource"
              },
              {
                "label": true,
                "type": "fixExamples"
              }
            ]
          }
        },
        {
          "ruleId": "python/WebCookieWithSecureFalse",
          "ruleIndex": 6,
          "level": "error",
          "message": {
            "text": "The cookie's Secure flag is set to False. Set it to true to protect the cookie from man-in-the-middle attacks.",
            "markdown": "The cookie's Secure flag is set to {0}. Set it to true to protect the cookie from man-in-the-middle attacks.",
            "arguments": [
              "[False](0)"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "pygoat/introduction/views.py",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 250,
                  "endLine": 250,
                  "startColumn": 95,
                  "endColumn": 99
                }
              }
            }
          ],
          "fingerprints": {
            "0": "5cde1ddb441d3f0467e923a5468286478dbadde47617ebc15633a7644604319c",
            "1": "d49f7e61.2da3d253.2683ade8.139c59a8.f4f10911.786f7372.cbfa2b68.ebed174f.8a30cfc6.2da3d253.79e62dc9.139c59a8.f4f10911.3e909653.cbfa2b68.d5c196e5"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "pygoat/introduction/views.py",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 250,
                            "endLine": 250,
                            "startColumn": 95,
                            "endColumn": 99
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "priorityScore": 806,
            "priorityScoreFactors": [
              {
                "label": true,
                "type": "multipleOccurrence"
              },
              {
                "label": true,
                "type": "hotFileSource"
              },
              {
                "label": true,
                "type": "fixExamples"
              }
            ]
          }
        },
        {
          "ruleId": "python/WebCookieWithSecureFalse",
          "ruleIndex": 6,
          "level": "error",
          "message": {
            "text": "The cookie's Secure flag is set to False. Set it to true to protect the cookie from man-in-the-middle attacks.",
            "markdown": "The cookie's Secure flag is set to {0}. Set it to true to protect the cookie from man-in-the-middle attacks.",
            "arguments": [
              "[False](0)"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "pygoat/introduction/views.py",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 264,
                  "endLine": 264,
                  "startColumn": 99,
                  "endColumn": 103
                }
              }
            }
          ],
          "fingerprints": {
            "0": "56b1785217d9b0795bfe2d053138f71c23cea8a60600650cd31990db570445d1",
            "1": "d49f7e61.2da3d253.2683ade8.139c59a8.f4f10911.786f7372.cbfa2b68.ebed174f.8a30cfc6.2da3d253.79e62dc9.139c59a8.f4f10911.3e909653.cbfa2b68.d5c196e5"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "pygoat/introduction/views.py",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 264,
                            "endLine": 264,
                            "startColumn": 99,
                            "endColumn": 103
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "priorityScore": 806,
            "priorityScoreFactors": [
              {
                "label": true,
                "type": "multipleOccurrence"
              },
              {
                "label": true,
                "type": "hotFileSource"
              },
              {
                "label": true,
                "type": "fixExamples"
              }
            ]
          }
        },
        {
          "ruleId": "python/NoHardcodedCredentials",
          "ruleIndex": 7,
          "level": "warning",
          "message": {
            "text": "Do not hardcode credentials in code. Found hardcoded credential used in a condition.",
            "markdown": "Do not hardcode credentials in code. Found {0} credential used in a condition.",
            "arguments": [
              "[hardcoded](0)"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "pygoat/introduction/views.py",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 756,
                  "endLine": 756,
                  "startColumn": 24,
                  "endColumn": 29
                }
              }
            }
          ],
          "fingerprints": {
            "0": "33e1fa9a6a2e6bb302e08c41a5592c4c1699850a164bf3902d7258cef17367a4",
            "1": "26f1400e.ab5d79e8.adbdd3c3.73cd7f67.1d07cee4.a5d7f69f.00f5d58a.10875e84.a6b41d6e.ab5d79e8.c3adccb6.139c59a8.d40ba80d.a5d7f69f.a2237efa.91057b05"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "pygoat/introduction/views.py",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 756,
                            "endLine": 756,
                            "startColumn": 24,
                            "endColumn": 29
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "priorityScore": 558,
            "priorityScoreFactors": [
              {
                "label": true,
                "type": "multipleOccurrence"
              },
              {
                "label": true,
                "type": "hotFileSource"
              },
              {
                "label": true,
                "type": "fixExamples"
              }
            ]
          }
        },
        {
          "ruleId": "python/NoHardcodedCredentials",
          "ruleIndex": 7,
          "level": "warning",
          "message": {
            "text": "Do not hardcode credentials in code. Found hardcoded credential used in a condition.",
            "markdown": "Do not hardcode credentials in code. Found {0} credential used in a condition.",
            "arguments": [
              "[hardcoded](0)"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "pygoat/introduction/views.py",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 758,
                  "endLine": 758,
                  "startColumn": 26,
                  "endColumn": 32
                }
              }
            }
          ],
          "fingerprints": {
            "0": "cee1684dc1285621ffabdee764681c981df104b7d7b8206a8edc9537aad35cc1",
            "1": "26f1400e.ab5d79e8.adbdd3c3.393a15d6.1d07cee4.a5d7f69f.8fd07bbd.6e2ae81c.a6b41d6e.ab5d79e8.f3385909.139c59a8.d40ba80d.a5d7f69f.a2237efa.91057b05"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "pygoat/introduction/views.py",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 758,
                            "endLine": 758,
                            "startColumn": 26,
                            "endColumn": 32
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "priorityScore": 558,
            "priorityScoreFactors": [
              {
                "label": true,
                "type": "multipleOccurrence"
              },
              {
                "label": true,
                "type": "hotFileSource"
              },
              {
                "label": true,
                "type": "fixExamples"
              }
            ]
          }
        },
        {
          "ruleId": "python/NoHardcodedCredentials",
          "ruleIndex": 7,
          "level": "warning",
          "message": {
            "text": "Do not hardcode credentials in code. Found hardcoded credential used in a condition.",
            "markdown": "Do not hardcode credentials in code. Found {0} credential used in a condition.",
            "arguments": [
              "[hardcoded](0)"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "pygoat/introduction/playground/A9/archive.py",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 15,
                  "endLine": 15,
                  "startColumn": 24,
                  "endColumn": 30
                }
              }
            }
          ],
          "fingerprints": {
            "0": "6658fb7fb5cb368bc8a84debab6293891cc67257ac88bd45be35b35891fd5b46",
            "1": "26f1400e.ab5d79e8.adbdd3c3.393a15d6.1d07cee4.a5d7f69f.8fd07bbd.6e2ae81c.a6b41d6e.ab5d79e8.c3adccb6.139c59a8.d40ba80d.a5d7f69f.a2237efa.91057b05"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "pygoat/introduction/playground/A9/archive.py",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 15,
                            "endLine": 15,
                            "startColumn": 24,
                            "endColumn": 30
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "priorityScore": 558,
            "priorityScoreFactors": [
              {
                "label": true,
                "type": "multipleOccurrence"
              },
              {
                "label": true,
                "type": "hotFileSource"
              },
              {
                "label": true,
                "type": "fixExamples"
              }
            ]
          }
        },
        {
          "ruleId": "python/NoHardcodedCredentials",
          "ruleIndex": 7,
          "level": "warning",
          "message": {
            "text": "Do not hardcode credentials in code. Found hardcoded credential used in a condition.",
            "markdown": "Do not hardcode credentials in code. Found {0} credential used in a condition.",
            "arguments": [
              "[hardcoded](0)"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "pygoat/introduction/playground/A9/api.py",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 15,
                  "endLine": 15,
                  "startColumn": 24,
                  "endColumn": 30
                }
              }
            }
          ],
          "fingerprints": {
            "0": "c217ae9554e9dea63827c58afc8f3f670ab088adeb9f02bae283520ed0050a41",
            "1": "26f1400e.ab5d79e8.adbdd3c3.393a15d6.1d07cee4.a5d7f69f.8fd07bbd.6e2ae81c.a6b41d6e.ab5d79e8.c3adccb6.139c59a8.d40ba80d.a5d7f69f.a2237efa.91057b05"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "pygoat/introduction/playground/A9/api.py",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 15,
                            "endLine": 15,
                            "startColumn": 24,
                            "endColumn": 30
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "priorityScore": 558,
            "priorityScoreFactors": [
              {
                "label": true,
                "type": "multipleOccurrence"
              },
              {
                "label": true,
                "type": "hotFileSource"
              },
              {
                "label": true,
                "type": "fixExamples"
              }
            ]
          }
        },
        {
          "ruleId": "python/Sqli",
          "ruleIndex": 8,
          "level": "error",
          "message": {
            "text": "Unsanitized input from an HTTP parameter flows into pygoat.introduction.models.login.objects.raw, where it is used in an SQL query. This may result in an SQL Injection vulnerability.",
            "markdown": "Unsanitized input from {0} {1} into {2}, where it is used in an SQL query. This may result in an SQL Injection vulnerability.",
            "arguments": [
              "[an HTTP parameter](0)",
              "[flows](1),(2),(3),(4),(5),(6),(7),(8),(9),(10),(11),(12),(13)",
              "[pygoat.introduction.models.login.objects.raw](14)"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "pygoat/introduction/views.py",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 112,
                  "endLine": 112,
                  "startColumn": 25,
                  "endColumn": 52
                }
              }
            }
          ],
          "fingerprints": {
            "0": "91621c8f54b8716c6e2844e6220aee479731d70958b711d68207b447ace2aea5",
            "1": "16691f08.04ad2656.7fa5b458.139c59a8.64b81ace.2cb9f218.081d3cee.8794408a.b613bcba.04ad2656.1db99176.8ff59f5c.64b81ace.2cb9f218.cf308c7a.22377707"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "pygoat/introduction/views.py",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 100,
                            "endLine": 100,
                            "startColumn": 14,
                            "endColumn": 25
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 1,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "pygoat/introduction/views.py",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 100,
                            "endLine": 100,
                            "startColumn": 14,
                            "endColumn": 25
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 2,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "pygoat/introduction/views.py",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 100,
                            "endLine": 100,
                            "startColumn": 14,
                            "endColumn": 29
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 3,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "pygoat/introduction/views.py",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 100,
                            "endLine": 100,
                            "startColumn": 9,
                            "endColumn": 12
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 4,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "pygoat/introduction/views.py",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 104,
                            "endLine": 104,
                            "startColumn": 12,
                            "endColumn": 15
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 5,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "pygoat/introduction/views.py",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 106,
                            "endLine": 106,
                            "startColumn": 42,
                            "endColumn": 45
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 6,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "pygoat/introduction/views.py",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 108,
                            "endLine": 108,
                            "startColumn": 77,
                            "endColumn": 80
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 7,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "pygoat/introduction/views.py",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 108,
                            "endLine": 108,
                            "startColumn": 29,
                            "endColumn": 80
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 8,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "pygoat/introduction/views.py",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 108,
                            "endLine": 108,
                            "startColumn": 29,
                            "endColumn": 98
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 9,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "pygoat/introduction/views.py",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 108,
                            "endLine": 108,
                            "startColumn": 29,
                            "endColumn": 107
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 10,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "pygoat/introduction/views.py",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 108,
                            "endLine": 108,
                            "startColumn": 29,
                            "endColumn": 111
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 11,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "pygoat/introduction/views.py",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 108,
                            "endLine": 108,
                            "startColumn": 17,
                            "endColumn": 25
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 12,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "pygoat/introduction/views.py",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 109,
                            "endLine": 109,
                            "startColumn": 23,
                            "endColumn": 31
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 13,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "pygoat/introduction/views.py",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 112,
                            "endLine": 112,
                            "startColumn": 43,
                            "endColumn": 51
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 14,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "pygoat/introduction/views.py",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 112,
                            "endLine": 112,
                            "startColumn": 25,
                            "endColumn": 52
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "priorityScore": 804,
            "priorityScoreFactors": [
              {
                "label": true,
                "type": "multipleOccurrence"
              },
              {
                "label": true,
                "type": "hotFileSource"
              },
              {
                "label": true,
                "type": "fixExamples"
              }
            ]
          }
        },
        {
          "ruleId": "python/Sqli",
          "ruleIndex": 8,
          "level": "error",
          "message": {
            "text": "Unsanitized input from an HTTP parameter flows into pygoat.introduction.models.sql_lab_table.objects.raw, where it is used in an SQL query. This may result in an SQL Injection vulnerability.",
            "markdown": "Unsanitized input from {0} {1} into {2}, where it is used in an SQL query. This may result in an SQL Injection vulnerability.",
            "arguments": [
              "[an HTTP parameter](0)",
              "[flows](1),(2),(3),(4),(5),(6),(7),(8),(9),(10),(11),(12),(13)",
              "[pygoat.introduction.models.sql_lab_table.objects.raw](14)"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "pygoat/introduction/views.py",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 803,
                  "endLine": 803,
                  "startColumn": 24,
                  "endColumn": 59
                }
              }
            }
          ],
          "fingerprints": {
            "0": "5664296e044561a6756ebb50a8fe053735074c2a6a4c72f575b3244f665c27ff",
            "1": "16691f08.04ad2656.7fa5b458.139c59a8.64b81ace.2cb9f218.081d3cee.7e855334.101290c2.04ad2656.1db99176.8ff59f5c.64b81ace.2cb9f218.cf308c7a.f46ed94e"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "pygoat/introduction/views.py",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 783,
                            "endLine": 783,
                            "startColumn": 14,
                            "endColumn": 25
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 1,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "pygoat/introduction/views.py",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 783,
                            "endLine": 783,
                            "startColumn": 14,
                            "endColumn": 25
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 2,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "pygoat/introduction/views.py",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 783,
                            "endLine": 783,
                            "startColumn": 14,
                            "endColumn": 29
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 3,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "pygoat/introduction/views.py",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 783,
                            "endLine": 783,
                            "startColumn": 9,
                            "endColumn": 12
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 4,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "pygoat/introduction/views.py",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 785,
                            "endLine": 785,
                            "startColumn": 15,
                            "endColumn": 18
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 5,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "pygoat/introduction/views.py",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 788,
                            "endLine": 788,
                            "startColumn": 12,
                            "endColumn": 15
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 6,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "pygoat/introduction/views.py",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 789,
                            "endLine": 789,
                            "startColumn": 79,
                            "endColumn": 82
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 7,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "pygoat/introduction/views.py",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 789,
                            "endLine": 789,
                            "startColumn": 25,
                            "endColumn": 82
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 8,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "pygoat/introduction/views.py",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 789,
                            "endLine": 789,
                            "startColumn": 25,
                            "endColumn": 100
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 9,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "pygoat/introduction/views.py",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 789,
                            "endLine": 789,
                            "startColumn": 25,
                            "endColumn": 109
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 10,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "pygoat/introduction/views.py",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 789,
                            "endLine": 789,
                            "startColumn": 25,
                            "endColumn": 113
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 11,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "pygoat/introduction/views.py",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 789,
                            "endLine": 789,
                            "startColumn": 13,
                            "endColumn": 21
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 12,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "pygoat/introduction/views.py",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 800,
                            "endLine": 800,
                            "startColumn": 19,
                            "endColumn": 27
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 13,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "pygoat/introduction/views.py",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 803,
                            "endLine": 803,
                            "startColumn": 50,
                            "endColumn": 58
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 14,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "pygoat/introduction/views.py",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 803,
                            "endLine": 803,
                            "startColumn": 24,
                            "endColumn": 59
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "priorityScore": 804,
            "priorityScoreFactors": [
              {
                "label": true,
                "type": "multipleOccurrence"
              },
              {
                "label": true,
                "type": "hotFileSource"
              },
              {
                "label": true,
                "type": "fixExamples"
              }
            ]
          }
        },
        {
          "ruleId": "python/HardcodedNonCryptoSecret",
          "ruleIndex": 9,
          "level": "error",
          "message": {
            "text": "Avoid hardcoding values that are meant to be secret. Found a hardcoded string used in here.",
            "markdown": "Avoid hardcoding values that are meant to be secret. Found {0} used in {1}.",
            "arguments": [
              "[a hardcoded string](0)",
              "[here](1)"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "pygoat/pygoat/settings.py",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 24,
                  "endLine": 24,
                  "startColumn": 1,
                  "endColumn": 10
                }
              }
            }
          ],
          "fingerprints": {
            "0": "79ee7049b2bcffb6c591ba9e2ef402826f6dbbeee524d39d63bf7483c600a202",
            "1": "50a81901.1c6650e9.79e62dc9.6373e959.0569c242.29be4556.b69c6615.8356f9c3.50a81901.1c6650e9.79e62dc9.6373e959.0569c242.29be4556.b69c6615.8356f9c3"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "pygoat/pygoat/settings.py",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 24,
                            "endLine": 24,
                            "startColumn": 14,
                            "endColumn": 65
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 1,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "pygoat/pygoat/settings.py",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 24,
                            "endLine": 24,
                            "startColumn": 1,
                            "endColumn": 10
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "priorityScore": 752,
            "priorityScoreFactors": [
              {
                "label": true,
                "type": "hotFileCodeFlow"
              },
              {
                "label": true,
                "type": "fixExamples"
              }
            ]
          }
        },
        {
          "ruleId": "python/PT",
          "ruleIndex": 10,
          "level": "error",
          "message": {
            "text": "Unsanitized input from an HTTP parameter flows into open, where it is used as a path. This may result in a Path Traversal vulnerability and allow an attacker to read arbitrary files.",
            "markdown": "Unsanitized input from {0} {1} into {2}, where it is used as a path. This may result in a Path Traversal vulnerability and allow an attacker to read arbitrary files.",
            "arguments": [
              "[an HTTP parameter](0)",
              "[flows](1),(2),(3),(4),(5),(6),(7)",
              "[open](8)"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "pygoat/introduction/views.py",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 852,
                  "endLine": 852,
                  "startColumn": 24,
                  "endColumn": 41
                }
              }
            }
          ],
          "fingerprints": {
            "0": "8cb0c85ab3cc79e0a80c831e98d15358fddf9f4c6df26cf9e59a66cad5562631",
            "1": "fc1592c8.09b47a5b.b19066ef.139c59a8.f3eda546.addfbd48.081ac3f4.ebed174f.7e401efd.590535da.1db99176.8ff59f5c.f3eda546.a5d7f69f.cf308c7a.f46ed94e"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "pygoat/introduction/views.py",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 848,
                            "endLine": 848,
                            "startColumn": 18,
                            "endColumn": 29
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 1,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "pygoat/introduction/views.py",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 848,
                            "endLine": 848,
                            "startColumn": 18,
                            "endColumn": 29
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 2,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "pygoat/introduction/views.py",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 848,
                            "endLine": 848,
                            "startColumn": 18,
                            "endColumn": 37
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 3,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "pygoat/introduction/views.py",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 848,
                            "endLine": 848,
                            "startColumn": 13,
                            "endColumn": 16
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 4,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "pygoat/introduction/views.py",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 851,
                            "endLine": 851,
                            "startColumn": 50,
                            "endColumn": 53
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 5,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "pygoat/introduction/views.py",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 851,
                            "endLine": 851,
                            "startColumn": 28,
                            "endColumn": 54
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 6,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "pygoat/introduction/views.py",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 851,
                            "endLine": 851,
                            "startColumn": 17,
                            "endColumn": 24
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 7,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "pygoat/introduction/views.py",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 852,
                            "endLine": 852,
                            "startColumn": 29,
                            "endColumn": 36
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 8,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "pygoat/introduction/views.py",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 852,
                            "endLine": 852,
                            "startColumn": 24,
                            "endColumn": 41
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "priorityScore": 802,
            "priorityScoreFactors": [
              {
                "label": true,
                "type": "hotFileSource"
              },
              {
                "label": true,
                "type": "fixExamples"
              }
            ]
          }
        },
        {
          "ruleId": "python/NoHardcodedPasswords",
          "ruleIndex": 11,
          "level": "warning",
          "message": {
            "text": "Do not hardcode passwords in code. Found hardcoded password used in a condition.",
            "markdown": "Do not hardcode passwords in code. Found {0} password used in a condition.",
            "arguments": [
              "[hardcoded](0)"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "pygoat/introduction/views.py",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 691,
                  "endLine": 691,
                  "startColumn": 42,
                  "endColumn": 56
                }
              }
            }
          ],
          "fingerprints": {
            "0": "e8c27c458901e926922a8438b67ac0a5b1dc3c606399bb67f2ef225b24f54344",
            "1": "26f1400e.f14b06e0.9768f6a8.40f1c5cb.1d07cee4.a5d7f69f.7460345e.00da2e24.49a3e9ba.04ad2656.f7ee2f22.d6c8e129.e68352f4.a5d7f69f.641b3df5.1d19bf80"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "pygoat/introduction/views.py",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 691,
                            "endLine": 691,
                            "startColumn": 42,
                            "endColumn": 56
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "priorityScore": 565,
            "priorityScoreFactors": [
              {
                "label": true,
                "type": "multipleOccurrence"
              },
              {
                "label": true,
                "type": "hotFileSource"
              },
              {
                "label": true,
                "type": "fixExamples"
              }
            ]
          }
        },
        {
          "ruleId": "python/NoHardcodedPasswords",
          "ruleIndex": 11,
          "level": "warning",
          "message": {
            "text": "Do not hardcode passwords in code. Found hardcoded password used in a condition.",
            "markdown": "Do not hardcode passwords in code. Found {0} password used in a condition.",
            "arguments": [
              "[hardcoded](0)"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "pygoat/introduction/views.py",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 731,
                  "endLine": 731,
                  "startColumn": 43,
                  "endColumn": 57
                }
              }
            }
          ],
          "fingerprints": {
            "0": "bb99cae7075457d79b823538699c7a4116612b5712cda99ac9b190a8fc880c4e",
            "1": "26f1400e.f14b06e0.9768f6a8.40f1c5cb.1d07cee4.a5d7f69f.ff1c0e21.00da2e24.b68e61ce.9dc2f629.c3adccb6.d6c8e129.e68352f4.a5d7f69f.081ac3f4.1d19bf80"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "pygoat/introduction/views.py",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 731,
                            "endLine": 731,
                            "startColumn": 43,
                            "endColumn": 57
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "priorityScore": 565,
            "priorityScoreFactors": [
              {
                "label": true,
                "type": "multipleOccurrence"
              },
              {
                "label": true,
                "type": "hotFileSource"
              },
              {
                "label": true,
                "type": "fixExamples"
              }
            ]
          }
        },
        {
          "ruleId": "python/NoHardcodedPasswords",
          "ruleIndex": 11,
          "level": "warning",
          "message": {
            "text": "Do not hardcode passwords in code. Found hardcoded password used in a condition.",
            "markdown": "Do not hardcode passwords in code. Found {0} password used in a condition.",
            "arguments": [
              "[hardcoded](0)"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "pygoat/introduction/views.py",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 756,
                  "endLine": 756,
                  "startColumn": 47,
                  "endColumn": 54
                }
              }
            }
          ],
          "fingerprints": {
            "0": "6757e71cf1c6fe5addca6683503c4b1436e7f6ddd7b15bd907936a19ce207c8b",
            "1": "26f1400e.45586184.adbdd3c3.d0c6bf4f.1d07cee4.a5d7f69f.f845724c.10875e84.a6b41d6e.ab5d79e8.c3adccb6.139c59a8.1d07cee4.a5d7f69f.a2237efa.f46ed94e"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "pygoat/introduction/views.py",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 756,
                            "endLine": 756,
                            "startColumn": 47,
                            "endColumn": 54
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "priorityScore": 565,
            "priorityScoreFactors": [
              {
                "label": true,
                "type": "multipleOccurrence"
              },
              {
                "label": true,
                "type": "hotFileSource"
              },
              {
                "label": true,
                "type": "fixExamples"
              }
            ]
          }
        },
        {
          "ruleId": "python/NoHardcodedPasswords",
          "ruleIndex": 11,
          "level": "warning",
          "message": {
            "text": "Do not hardcode passwords in code. Found hardcoded password used in a condition.",
            "markdown": "Do not hardcode passwords in code. Found {0} password used in a condition.",
            "arguments": [
              "[hardcoded](0)"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "pygoat/introduction/views.py",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 758,
                  "endLine": 758,
                  "startColumn": 50,
                  "endColumn": 61
                }
              }
            }
          ],
          "fingerprints": {
            "0": "5309c5bdff640754c8b25d95da7e7b7971fe3c65f6ffbac62397788879efd1c3",
            "1": "c1749e95.9e573fd9.f3385909.d0c6bf4f.1d07cee4.a5d7f69f.80dd4d7b.10875e84.a6b41d6e.ab5d79e8.f3385909.139c59a8.1d07cee4.a5d7f69f.a2237efa.f46ed94e"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "pygoat/introduction/views.py",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 758,
                            "endLine": 758,
                            "startColumn": 50,
                            "endColumn": 61
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "priorityScore": 565,
            "priorityScoreFactors": [
              {
                "label": true,
                "type": "multipleOccurrence"
              },
              {
                "label": true,
                "type": "hotFileSource"
              },
              {
                "label": true,
                "type": "fixExamples"
              }
            ]
          }
        },
        {
          "ruleId": "python/NoHardcodedPasswords",
          "ruleIndex": 11,
          "level": "warning",
          "message": {
            "text": "Do not hardcode passwords in code. Found hardcoded password used in a condition.",
            "markdown": "Do not hardcode passwords in code. Found {0} password used in a condition.",
            "arguments": [
              "[hardcoded](0)"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "pygoat/introduction/views.py",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 997,
                  "endLine": 997,
                  "startColumn": 55,
                  "endColumn": 64
                }
              }
            }
          ],
          "fingerprints": {
            "0": "bb38f40a4d4a879371fc696d8c847e8997dc8919d4b7dbec31f7bb302be38e45",
            "1": "26f1400e.10aef46d.adbdd3c3.d0c6bf4f.1d07cee4.a5d7f69f.fc5a7588.10875e84.a6b41d6e.ab5d79e8.c3adccb6.139c59a8.10a709c0.a5d7f69f.a2237efa.f46ed94e"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "pygoat/introduction/views.py",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 997,
                            "endLine": 997,
                            "startColumn": 55,
                            "endColumn": 64
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "priorityScore": 565,
            "priorityScoreFactors": [
              {
                "label": true,
                "type": "multipleOccurrence"
              },
              {
                "label": true,
                "type": "hotFileSource"
              },
              {
                "label": true,
                "type": "fixExamples"
              }
            ]
          }
        },
        {
          "ruleId": "python/NoHardcodedPasswords",
          "ruleIndex": 11,
          "level": "warning",
          "message": {
            "text": "Do not hardcode passwords in code. Found hardcoded password used in password.",
            "markdown": "Do not hardcode passwords in code. Found {0} password used in {1}.",
            "arguments": [
              "[hardcoded](0)",
              "[password](1)"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "pygoat/introduction/views.py",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 791,
                  "endLine": 791,
                  "startColumn": 63,
                  "endColumn": 96
                }
              }
            }
          ],
          "fingerprints": {
            "0": "c7b04e2f533178ead55e9928bc44f5d04d6e8a6b5a2624356eff0b6c2e44db1b",
            "1": "d241b765.2a09f43e.79e62dc9.b1e9f145.c81f18a9.ba14daf2.081ac3f4.8356f9c3.2d06e3d6.56a49daf.79e62dc9.dad8a914.1d07cee4.e3c8144d.081ac3f4.c0e75779"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "pygoat/introduction/views.py",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 791,
                            "endLine": 791,
                            "startColumn": 63,
                            "endColumn": 96
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 1,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "pygoat/introduction/views.py",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 791,
                            "endLine": 791,
                            "startColumn": 63,
                            "endColumn": 96
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "priorityScore": 565,
            "priorityScoreFactors": [
              {
                "label": true,
                "type": "multipleOccurrence"
              },
              {
                "label": true,
                "type": "hotFileSource"
              },
              {
                "label": true,
                "type": "fixExamples"
              }
            ]
          }
        },
        {
          "ruleId": "python/NoHardcodedPasswords",
          "ruleIndex": 11,
          "level": "warning",
          "message": {
            "text": "Do not hardcode passwords in code. Found hardcoded password used in password.",
            "markdown": "Do not hardcode passwords in code. Found {0} password used in {1}.",
            "arguments": [
              "[hardcoded](0)",
              "[password](1)"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "pygoat/introduction/views.py",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 795,
                  "endLine": 795,
                  "startColumn": 64,
                  "endColumn": 97
                }
              }
            }
          ],
          "fingerprints": {
            "0": "bdc951760af88ee258ad72bdcbe30e0632e6a359e219f9e016b3d2439c062800",
            "1": "38bfe91c.2a09f43e.79e62dc9.b1e9f145.e7106cc2.ba14daf2.081ac3f4.8356f9c3.2d06e3d6.56a49daf.79e62dc9.dad8a914.1d07cee4.e3c8144d.081ac3f4.c0e75779"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "pygoat/introduction/views.py",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 795,
                            "endLine": 795,
                            "startColumn": 64,
                            "endColumn": 97
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 1,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "pygoat/introduction/views.py",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 795,
                            "endLine": 795,
                            "startColumn": 64,
                            "endColumn": 97
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "priorityScore": 565,
            "priorityScoreFactors": [
              {
                "label": true,
                "type": "multipleOccurrence"
              },
              {
                "label": true,
                "type": "hotFileSource"
              },
              {
                "label": true,
                "type": "fixExamples"
              }
            ]
          }
        },
        {
          "ruleId": "python/NoHardcodedPasswords",
          "ruleIndex": 11,
          "level": "warning",
          "message": {
            "text": "Do not hardcode passwords in code. Found hardcoded password used in password.",
            "markdown": "Do not hardcode passwords in code. Found {0} password used in {1}.",
            "arguments": [
              "[hardcoded](0)",
              "[password](1)"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "pygoat/introduction/views.py",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 797,
                  "endLine": 797,
                  "startColumn": 63,
                  "endColumn": 96
                }
              }
            }
          ],
          "fingerprints": {
            "0": "c9d1104b2704d98d86e805dce950b8c0e670c5dfc00fd58b8e178d99ce52aa8f",
            "1": "d241b765.2a09f43e.79e62dc9.b1e9f145.e7106cc2.ba14daf2.081ac3f4.8356f9c3.2d06e3d6.56a49daf.79e62dc9.dad8a914.1d07cee4.e3c8144d.081ac3f4.c0e75779"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "pygoat/introduction/views.py",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 797,
                            "endLine": 797,
                            "startColumn": 63,
                            "endColumn": 96
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 1,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "pygoat/introduction/views.py",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 797,
                            "endLine": 797,
                            "startColumn": 63,
                            "endColumn": 96
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "priorityScore": 565,
            "priorityScoreFactors": [
              {
                "label": true,
                "type": "multipleOccurrence"
              },
              {
                "label": true,
                "type": "hotFileSource"
              },
              {
                "label": true,
                "type": "fixExamples"
              }
            ]
          }
        },
        {
          "ruleId": "python/CommandInjection",
          "ruleIndex": 12,
          "level": "error",
          "message": {
            "text": "Unsanitized input from an HTTP parameter flows into subprocess.Popen, where it is used as a shell command. This may result in a Command Injection vulnerability.",
            "markdown": "Unsanitized input from {0} {1} into {2}, where it is used as a shell command. This may result in a Command Injection vulnerability.",
            "arguments": [
              "[an HTTP parameter](0)",
              "[flows](1),(2),(3),(4),(5),(6),(7),(8),(9),(10)",
              "[subprocess.Popen](11)"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "pygoat/introduction/views.py",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 374,
                  "endLine": 374,
                  "startColumn": 27,
                  "endColumn": 42
                }
              }
            }
          ],
          "fingerprints": {
            "0": "a272335ba9333d0a917b15b47315ab5b698976b3aa421608b1a80edd4deb9fdd",
            "1": "94782d11.de616afe.79e62dc9.139c59a8.cb53ba52.ba14daf2.081ac3f4.74beec5c.7e401efd.f16887a3.1db99176.83653e65.1d07cee4.a5d7f69f.cf308c7a.028ffdf6"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "pygoat/introduction/views.py",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 363,
                            "endLine": 363,
                            "startColumn": 20,
                            "endColumn": 31
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 1,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "pygoat/introduction/views.py",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 363,
                            "endLine": 363,
                            "startColumn": 20,
                            "endColumn": 31
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 2,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "pygoat/introduction/views.py",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 363,
                            "endLine": 363,
                            "startColumn": 20,
                            "endColumn": 35
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 3,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "pygoat/introduction/views.py",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 363,
                            "endLine": 363,
                            "startColumn": 13,
                            "endColumn": 18
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 4,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "pygoat/introduction/views.py",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 364,
                            "endLine": 364,
                            "startColumn": 20,
                            "endColumn": 25
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 5,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "pygoat/introduction/views.py",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 364,
                            "endLine": 364,
                            "startColumn": 20,
                            "endColumn": 33
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 6,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "pygoat/introduction/views.py",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 364,
                            "endLine": 364,
                            "startColumn": 13,
                            "endColumn": 18
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 7,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "pygoat/introduction/views.py",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 368,
                            "endLine": 368,
                            "startColumn": 46,
                            "endColumn": 51
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 8,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "pygoat/introduction/views.py",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 368,
                            "endLine": 368,
                            "startColumn": 25,
                            "endColumn": 44
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 9,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "pygoat/introduction/views.py",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 368,
                            "endLine": 368,
                            "startColumn": 17,
                            "endColumn": 23
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 10,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "pygoat/introduction/views.py",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 375,
                            "endLine": 375,
                            "startColumn": 21,
                            "endColumn": 27
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 11,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "pygoat/introduction/views.py",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 374,
                            "endLine": 374,
                            "startColumn": 27,
                            "endColumn": 42
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "priorityScore": 802,
            "priorityScoreFactors": [
              {
                "label": true,
                "type": "hotFileSource"
              },
              {
                "label": true,
                "type": "fixExamples"
              }
            ]
          }
        }
      ],
      "properties": {
        "coverage": [
          {
            "files": 44,
            "isSupported": true,
            "lang": "Python"
          },
          {
            "files": 5,
            "isSupported": true,
            "lang": "JavaScript"
          },
          {
            "files": 68,
            "isSupported": true,
            "lang": "HTML"
          }
        ]
      }
    }
  ]
}
